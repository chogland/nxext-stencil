/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { AlertAppearance, Appearance, AppLayoutHeaderWidth, AppLayoutSidebar, AppLayoutType, AutocompleteTypes, BadgeColor, BannerAppearance, BoxDisplay, BoxSpacing, BreadCrumbsType, ButtonAppearance, ButtonType, CardMediaSize, CheckboxChangeEventDetail, CheckboxGroupDirection, CheckboxType, DateRangeChange, DividerAppearance, DividerDirection, FlexAlignContent, FlexAlignItems, FlexDirection, FlexGap, FlexHeight, FlexInline, FlexItemAlignSelf, FlexItemBasis, FlexItemGrow, FlexItemOrder, FlexItemShrink, FlexJustifyContent, FlexWrap, HeadlineLevel, HeroIconBackground, HeroIconShape, HeroIconSize, HeroIconType, IndicatorAppearance, InputChangeEventDetail, InputType, ListItemType, ListType, MenuWidth, PanelChangeEventDetail, PanelPosition, RadioGroupDirection, RadioType, SearchChangeEventDetail, SizesAll, SizesSmMdLg, SnackbarAppearance, Spacing, StepperType, SubLabelType, TabAppearance, TabClickEventDetail, TailwindColors, Target, TextAlign, TextareaResize, TextSize, TextType, TextWeight, TooltipSize } from "./components/interfaces";
import { OverlayPositioning, PopperPlacement } from "./utils/popper";
import { DateLocaleData } from "./components/rds-form-elements/rds-date-picker/interfaces";
import { HoverRange } from "./utils/date";
import { Validator, ValidatorEntry } from "./utils/validator";
import { RdsPaginationDetail } from "./components/rds-pagination/rds-pagination-interface";
export namespace Components {
    interface RdsAccordion {
        /**
          * This determines the selection mode for the accordion item. If single, it will close other accordionitems when one is clicked.
         */
        "selectionMode": string;
    }
    interface RdsAccordionItem {
        "active": boolean;
        /**
          * The text displayed for the accordion item title. You may use this prop instead of the slot if you are only adding plain text as the title.
         */
        "itemTitle"?: string;
        "padding": boolean;
    }
    interface RdsAction {
        /**
          * Indicates whether the action is highlighted.
         */
        "active": boolean;
        /**
          * When true, disabled prevents interaction. This state shows actions grayed out.
         */
        "disabled": boolean;
        /**
          * The name of the icon to display. The value of this property must match the icon name from RDS Icons
         */
        "icon"?: string;
        /**
          * The label of the action.
         */
        "label"?: string;
        "setFocus": () => Promise<void>;
        /**
          * Text that accompanies the action icon.
         */
        "text": string;
        /**
          * Indicates whether the text is displayed.
         */
        "textEnabled": boolean;
    }
    interface RdsActionBar {
        /**
          * If `true`, action bar will stay in collapsed/non expandable state.
         */
        "collapsible": boolean;
        "setFocus": (focusId?: 'expand-toggle') => Promise<void>;
    }
    interface RdsAlert {
        /**
          * The appearance of the Alert. Options are: `"info"`, `"error"`, `"warning"`, and `"success"`.
         */
        "appearance": AlertAppearance;
        "dismiss": () => Promise<void>;
        /**
          * If set to `true`, the alert has a dismiss button and is dismissible.
         */
        "dismissible": boolean;
        /**
          * This is for an accessible label on the primary action.
         */
        "label": string;
        "setFocus": () => Promise<void>;
        /**
          * If set to `false`, the alert will be hidden.
         */
        "visible": boolean;
    }
    interface RdsAppLayout {
        /**
          * @deprecated Sets whether the background of the content region is FM Gray or FM White on Default/Phase 1 and Workflow App Layouts.
         */
        "backgroundColor": string;
        /**
          * This property can change the width of the header from auto to full-screen.
         */
        "headerWidth"?: AppLayoutHeaderWidth;
        /**
          * @deprecated Sets the display of the flyout slot for slide out content
         */
        "panel": boolean;
        "preventScroll": boolean;
        /**
          * Sets whether the sidebars are displayed Options are: left, right, both, none
         */
        "sidebar": AppLayoutSidebar;
        /**
          * @deprecated Determines the layout based on the journey. 'base' for latest design; undefined for phase 1 design.
         */
        "type"?: AppLayoutType;
    }
    interface RdsAvatar {
        /**
          * @deprecated Set the drop shadow of the avatar for the deprecated phase 1 avatar.
         */
        "shadow": boolean;
        /**
          * Set the size of the avatar, default is lg. Options are: sm, md, lg and xl
         */
        "size"?: string;
        /**
          * Set the image src for the image used as the avatar
         */
        "src": string;
        /**
          * Set the fallback initials when no image is present.
         */
        "text"?: string;
    }
    interface RdsBadge {
        /**
          * Determines the badge color. Options: 'gray', 'red', 'yellow', 'green', 'orange', 'blue' and 'purple'.
         */
        "color"?: BadgeColor;
        /**
          * A string value can be used instead of value if needed.
         */
        "text"?: string;
        /**
          * Set the number displayed in the badge.
         */
        "value"?: number;
    }
    interface RdsBanner {
        /**
          * The appearance of the banner.
         */
        "appearance": BannerAppearance;
        "dismiss": () => Promise<void>;
        "dismissed": boolean;
        /**
          * If set to `true`, the banner will be dismissable.
         */
        "dismissible": boolean;
    }
    interface RdsBox {
        /**
          * Controls the background color of the component and its boundaries.
         */
        "bg"?: TailwindColors;
        /**
          * Controls the text color of all slotted contents.
         */
        "color"?: TailwindColors;
        /**
          * Sets the display type of the component.
         */
        "display"?: BoxDisplay;
        /**
          * Explicitly controls the margin around the component. This can be set using an RDS spacing value or a valid CSS length value.
         */
        "margin"?: BoxSpacing;
        /**
          * Explicitly controls the padding around the component. This can be set using an RDS spacing value or a valid CSS length value.
         */
        "padding"?: BoxSpacing;
        "styles"?: string;
    }
    interface RdsBreadcrumb {
        /**
          * Manages the responsive rendering of the component props.
         */
        "breakpoint": string;
        /**
          * If true, displays the caret in all breakpoints. If false, hides the caret on breakpoints 'md' and above. This is dynamically handled by the parent RdsBreadcrumbs component. It will be set to false for the first slotted RdsBreadcrumb.
         */
        "caret": boolean;
        /**
          * The separator of the Bread Crumbs. Options are: `"chevron"` and `"slash"`.
         */
        "separator": BreadCrumbsType;
        /**
          * If true, displays the slash in all breakpoints. If false, hides the slash on breakpoints 'md' and above. This is dynamically handled by the parent RdsBreadcrumbs component. It will be set to false for the first slotted RdsBreadcrumb.
         */
        "slash": boolean;
    }
    interface RdsBreadcrumbs {
        /**
          * The separator of the Bread Crumbs. Options are: `"chevron"` and `"slash"`.
         */
        "separator": BreadCrumbsType;
    }
    interface RdsButton {
        /**
          * Active state for button. To be used within a button group or as part of a menu (secondary & tertiary appearances only). When true, button will appear active.
         */
        "active": boolean;
        /**
          * The appearance of the button. The options are different depending on the button `type`. _Note: Appearance types have been updated as part of the Phase 2 experience._
         */
        "appearance": ButtonAppearance;
        /**
          * This property handles the disabled state of the button.
         */
        "disabled": boolean;
        /**
          * Adds button group specific styles.
          * @private
         */
        "group"?: boolean;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href"?: string | undefined;
        /**
          * Adds extra padding on the button if an icon is the only contents.
         */
        "iconOnly": boolean;
        /**
          * @deprecated Custom attribute that can be used when `rds-filter` is needed. It applies a customEvent to trigger `rds-filter`.
         */
        "isFilter": boolean;
        /**
          * Checks a form's elements with constraint validations. Button's `type` must equal 'submit' and must exist inside of a `<form>` container.
         */
        "isFormValid": () => Promise<boolean>;
        /**
          * Accessible label for button.
         */
        "label"?: string;
        /**
          * If `true`, button is set to open mode. Adds styles to the button to indicate the menu is open. Set up to inherit from the parent `RdsMenu` component.
         */
        "open": boolean;
        /**
          * If `true`, button is set to selected mode. Adds styles to the button to indicate a menu item is selected. Set up to inherit from the parent `RdsMenu` component.
         */
        "selected": boolean;
        /**
          * The button size. _Note: The `"lg"` property is no longer full-width. See `"xl"` for full-width._
         */
        "size"?: SizesAll;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided.
         */
        "target"?: Target | undefined;
        /**
          * @deprecated Old way of setting button text. You can now type within the button tags set the button text.
         */
        "text"?: string;
        /**
          * The type of the button.
         */
        "type": ButtonType;
    }
    interface RdsButtonGroup {
        /**
          * If true, buttons are full-width and equally spaced on mobile screens.
         */
        "mobileFullWidth": boolean;
    }
    interface RdsCardBody {
        /**
          * If `true`, a 1rem (16px) padding will appear.
         */
        "padded": boolean;
    }
    interface RdsCardContainer {
        /**
          * If `true`, round corners will be enabled for the card container.
         */
        "rounded": boolean;
        /**
          * If `true`, a shadow will be visible around the card container.
         */
        "shadow": boolean;
        /**
          * If `true`, the card container will inherit styles that allow it to stand on its own, without any other card parts.
         */
        "simple": boolean;
    }
    interface RdsCardFooter {
        /**
          * If `true`, a 1rem (16px) padding will appear on left, right and bottom.
         */
        "padded": boolean;
        /**
          * If `true`, a top border will appear on the footer.
         */
        "rule": boolean;
    }
    interface RdsCardHeader {
        /**
          * If `true`, a 1rem (16px) padding will appear on left and right.
         */
        "padded": boolean;
        /**
          * If `true`, a bottom border will appear.
         */
        "rule": boolean;
    }
    interface RdsCardLocations {
        /**
          * @deprecated When error is true the card will display a message with a slot for action.
         */
        "error"?: boolean;
        /**
          * @deprecated When error is true the card will display a message with a slot for action.
         */
        "loading"?: boolean;
        /**
          * @deprecated When enabled, this will show the first number box for showing Location Count.
         */
        "showLocations": boolean;
    }
    interface RdsCardMedia {
        /**
          * Set the height of the media element.
         */
        "size": CardMediaSize;
        /**
          * Set the source url of the image.
         */
        "src": string;
        /**
          * Set the tag text of the image.
         */
        "tag"?: string;
    }
    interface RdsCardTitle {
        /**
          * Sets the headline level.
         */
        "level": HeadlineLevel;
    }
    interface RdsCheckbox {
        /**
          * Set the default checked value to false.
         */
        "checked": boolean;
        /**
          * Set the disabled state to false.
         */
        "disabled": boolean;
        /**
          * If `true`, checkbox will be in error/invalid mode.
         */
        "error": boolean;
        /**
          * If `true`, checkbox is inside a checkbox-group component.
         */
        "group": boolean;
        /**
          * Set the label string value.
         */
        "label": string;
        /**
          * The id of the element.
         */
        "name": string;
        /**
          * Whether or not the checkbox is required.
         */
        "required": boolean;
        /**
          * Set the appearance type of checkbox.
         */
        "type": CheckboxType;
        /**
          * If `true`, the checkbox will be validated against the constraint validators that are set.
         */
        "validate": boolean;
        /**
          * Validates the checkbox's `input` element.
         */
        "validateConstraint": () => Promise<void>;
        /**
          * The value of the checkbox input.
         */
        "value"?: any;
    }
    interface RdsCheckboxGroup {
        /**
          * Sets the direction of the individual checkboxes
         */
        "direction": CheckboxGroupDirection;
        /**
          * Sets the disabled property of all slotted checkboxes.
         */
        "disabled": boolean;
        /**
          * Sets the label for the entire checkbox group
         */
        "label": string;
        /**
          * Sets the name property of all slotted checkboxes.
         */
        "name": string;
        /**
          * Sets the required property of all slotted checkboxes
         */
        "required": boolean;
        /**
          * Sets the type property of all slotted checkboxes.
         */
        "type": CheckboxType;
        /**
          * If `true`, the checkbox group will be validated against the constraint validators that are set.
         */
        "validate"?: boolean;
        "validateConstraint": () => Promise<boolean>;
    }
    interface RdsChip {
        /**
          * Optionally set active to display in active state
         */
        "active"?: boolean;
        /**
          * Optionally make the Chip clickable
         */
        "clickable"?: boolean;
        /**
          * If `true`, the user cannot interact with the chip.
         */
        "disabled": boolean;
        /**
          * Optionally show a button the user can click to dismiss the chip
         */
        "dismissible"?: boolean;
        /**
          * Optionally pass an icon to display
          * @deprecated - a dot is provided for active Chips. Icons are no longer accepted inside the Chip.
         */
        "icon"?: string;
        "setFocus": () => Promise<void>;
        /**
          * Text displayed inside of the Chip
         */
        "text": string;
        /**
          * Value to provide the Chip.
         */
        "value": any;
    }
    interface RdsCombobox {
        /**
          * Opens or closes the combobox
         */
        "active": boolean;
        /**
          * Disable combobox input
         */
        "disabled": boolean;
        /**
          * When true, there is an error in fetch.
         */
        "error": boolean;
        /**
          * Aria label for combobox (required)
         */
        "label": string;
        /**
          * When true, API is fetching data.
         */
        "loading": boolean;
        /**
          * Specify the maximum number of combobox items (including nested children) to display before showing the scroller
         */
        "maxItems": number;
        /**
          * The name of the switch input
         */
        "name": string;
        /**
          * When true, API is not returning the data.
         */
        "noResult": boolean;
        /**
          * Describes the type of positioning to use for the overlaid content. If your element is in a fixed container, use the 'fixed' value.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Placeholder text for input
         */
        "placeholder"?: string;
        /**
          * Updates the position of the component.
         */
        "reposition": () => Promise<void>;
        /**
          * When true, the combobox is required.
         */
        "required": boolean;
        /**
          * Sets focus on the component.
         */
        "setFocus": () => Promise<void>;
        /**
          * If `true`, the combobox will be validated against the constraint validators that are set.
         */
        "validate"?: boolean;
        /**
          * The value(s) of the selectedItem(s)
         */
        "value": string;
    }
    interface RdsComboboxItem {
        /**
          * True when item is highlighted either from keyboard or mouse hover
         */
        "active": boolean;
        /**
          * When true, the item cannot be clicked and is visually muted.
         */
        "disabled": boolean;
        /**
          * Unique identifier, used for accessibility
         */
        "guid": string;
        /**
          * Set this to true to pre-select an item. Toggles when an item is checked/unchecked.
         */
        "selected": boolean;
        /**
          * The main label for this item.
         */
        "textLabel": string;
        /**
          * Used to toggle the selection state. By default this won't trigger an event. The first argument allows the value to be coerced, rather than swapping values.
         */
        "toggleSelected": (coerce?: boolean) => Promise<void>;
        /**
          * The item's associated value
         */
        "value": any;
    }
    interface RdsContact {
        /**
          * Initials shown when no image url provided.
         */
        "avatarText": string;
        /**
          * This will set the url for the image in Avatar, if needed.
         */
        "avatarUrl"?: string;
        /**
          * A third line of detail for additional information about the contact person.
         */
        "detail"?: string;
        /**
          * Name to be displayed.
         */
        "name"?: string;
        /**
          * Role or other details to be shown below the name.
         */
        "role"?: string;
    }
    interface RdsDatePicker {
        /**
          * Active range
         */
        "activeRange"?: 'start' | 'end';
        /**
          * Selected end date
          * @deprecated use value instead
         */
        "end"?: string;
        /**
          * Selected end date as full date object
          * @deprecated use valueAsDate instead
         */
        "endAsDate"?: Date;
        /**
          * Number at which section headings should start for this component.
         */
        "headingLevel": HeadlineLevel;
        /**
          * Localized string for "next month" (used for aria label)
          * @default "Next month"
         */
        "intlNextMonth"?: string;
        /**
          * Localized string for "previous month" (used for aria label)
          * @default "Previous month"
         */
        "intlPrevMonth"?: string;
        /**
          * Localized string for "year" (used for aria label)
          * @default "Year"
         */
        "intlYear"?: string;
        /**
          * BCP 47 language tag for desired language and country format
         */
        "locale"?: string;
        /**
          * Latest allowed date ("yyyy-mm-dd")
         */
        "max"?: string;
        /**
          * Latest allowed date as full date object
         */
        "maxAsDate"?: Date;
        /**
          * Earliest allowed date ("yyyy-mm-dd")
         */
        "min"?: string;
        /**
          * Earliest allowed date as full date object
         */
        "minAsDate"?: Date;
        /**
          * Disables the default behaviour on the third click of narrowing or extending the range and instead starts a new range.
         */
        "proximitySelectionDisabled": boolean;
        /**
          * Range mode activation
         */
        "range": boolean;
        /**
          * Selected start date
          * @deprecated use value instead
         */
        "start"?: string;
        /**
          * Selected start date as full date object
          * @deprecated use valueAsDate instead
         */
        "startAsDate"?: Date;
        /**
          * Selected date
         */
        "value"?: string | string[];
        /**
          * Selected date as full date object
         */
        "valueAsDate"?: Date | Date[];
    }
    interface RdsDatePickerDay {
        /**
          * Date is actively in focus for keyboard navigation
         */
        "active": boolean;
        /**
          * Date is in the current month.
         */
        "currentMonth": boolean;
        /**
          * Day of the month to be shown.
         */
        "day": number;
        /**
          * Date is outside of range and can't be selected
         */
        "disabled": boolean;
        /**
          * Date is the end of date range
         */
        "endOfRange": boolean;
        /**
          * Date is currently highlighted as part of the range
         */
        "highlighted": boolean;
        /**
          * CLDR data for current locale
         */
        "localeData": DateLocaleData;
        /**
          * Showing date range
         */
        "range": boolean;
        "rangeHover": boolean;
        /**
          * Date is the current selected date of the picker
         */
        "selected": boolean;
        /**
          * Date is the start of date range
         */
        "startOfRange": boolean;
        /**
          * Date value for the day.
         */
        "value": Date;
    }
    interface RdsDatePickerMonth {
        /**
          * Date currently active.
         */
        "activeDate": Date;
        /**
          * End date currently active
         */
        "endDate"?: Date;
        /**
          * The range of dates currently being hovered
         */
        "hoverRange": HoverRange;
        /**
          * CLDR locale data for current locale
         */
        "localeData": DateLocaleData;
        /**
          * Maximum date of the calendar above which is disabled.
         */
        "max": Date;
        /**
          * Minimum date of the calendar below which is disabled.
         */
        "min": Date;
        /**
          * Already selected date.
         */
        "selectedDate": Date;
        /**
          * Start date currently active.
         */
        "startDate"?: Date;
    }
    interface RdsDatePickerMonthHeader {
        /**
          * Focused date with indicator (will become selected date if user proceeds)
         */
        "activeDate": Date;
        /**
          * Number at which section headings should start for this component.
         */
        "headingLevel": HeadlineLevel;
        /**
          * Localized string for next month.
         */
        "intlNextMonth": string;
        /**
          * Localized string for previous month.
         */
        "intlPrevMonth": string;
        /**
          * Localized string for year.
         */
        "intlYear": string;
        /**
          * User's language and region as BCP 47 formatted string.
         */
        "locale": string;
        /**
          * CLDR locale data for translated calendar info
         */
        "localeData": DateLocaleData;
        /**
          * Maximum date of the calendar above which is disabled.
         */
        "max": Date;
        /**
          * Minimum date of the calendar below which is disabled.
         */
        "min": Date;
        /**
          * Already selected date.
         */
        "selectedDate": Date;
    }
    interface RdsDivider {
        /**
          * @deprecated Sets the appearance/color of the divider.
         */
        "appearance": DividerAppearance;
        /**
          * This determines the spacing around the divider. It will add margin to top/bottom for horizonal dividers. It will add margin to left/right for vertical dividers.
         */
        "spacing": Spacing;
        /**
          * Sets which direction the divider is oriented.
         */
        "type": DividerDirection;
    }
    interface RdsErrorPage {
        /**
          * Renders the content of error page based on the error code also defaults to 404.
         */
        "errorCode": number;
    }
    interface RdsFab {
        /**
          * When true, disabled prevents interaction. This state will not emit the rdsFabClicked event when set to true.
         */
        "disabled": boolean;
        /**
          * What icon to be displayed. Icons can be found in our `RdsHeroIcon` component.
          * @default 'plus'
         */
        "icon"?: string;
        /**
          * Accessible label for button. If text is provided, text is used. Otherwise it will default to this label if text isn't provided.
         */
        "label"?: string;
        "setFocus": () => Promise<void>;
        /**
          * Sets the FAB button size.
         */
        "size"?: SizesSmMdLg;
        /**
          * Text that displays in the tooltip on FAB hover
         */
        "text": string;
        /**
          * This property can be used to disable the tooltip on hover. Default shows tooltip with text or label.
         */
        "tooltip"?: boolean;
    }
    interface RdsFileList {
        /**
          * The clickable property controls whether or not hover events occur on filelist. If true, the file list's hover state is shown.
         */
        "clickable": boolean;
    }
    interface RdsFileUploader {
        /**
          * Comma separated string; tells us what file formats file uploader should accept.
         */
        "accept": string;
        /**
          * Error message to display when format is invalid.
         */
        "acceptError": string;
        /**
          * Additional information to send to server other than the file.
         */
        "actionParams": any;
        /**
          * URL to make server call.
         */
        "actionURL": string;
        /**
          * File uploader description.
         */
        "description": string;
        /**
          * Error message when a file upload fails.
         */
        "fileUploadError": string;
        /**
          * Max files allowed to upload.
         */
        "filesLimit": number;
        /**
          * Maximum file size the file uploader must accept.
         */
        "maxFileSize": number;
        /**
          * Error message to display when file size exceeds limit.
         */
        "maxFileSizeError": string;
        /**
          * Error message when going beyond files limit.
         */
        "maxFilesLimitError": string;
        /**
          * Passes modifications to the xhr request.
         */
        "modifyRequest": (xhr: any) => any;
        /**
          * If multiple files are allowed.
         */
        "multiple": boolean;
        /**
          * File uploader text.
         */
        "text": string;
        /**
          * Uploads the files to the server; emits an after file is uploaded
         */
        "uploadFiles": () => Promise<void>;
    }
    interface RdsFileUploaderFile {
        /**
          * Sets the file id
         */
        "fileId": number;
        /**
          * Sets the file name
         */
        "name": string;
    }
    interface RdsFileUploaderProgress {
        /**
          * Error text for the file upload
         */
        "error": string;
        /**
          * Sets the file id
         */
        "fileId": number;
        /**
          * Sets the file name
         */
        "fileName": string;
        /**
          * File upload progress
         */
        "progress": number;
    }
    interface RdsFilter {
        /**
          * @deprecated Apply filter search results for mobile breakpoints
         */
        "filterResults"?: number;
        /**
          * @deprecated Sets the toggle property of the filter component container
         */
        "isToggled"?: boolean;
        /**
          * @deprecated Accessible label for filter.
         */
        "label"?: string;
    }
    interface RdsFlex {
        /**
          * Space between and around flex items along the main-axis of the container, when the flex items span multiple lines. This only takes effect when `wrap` is set to true.
         */
        "alignContent"?: FlexAlignContent;
        /**
          * Space between and around flex items along the cross-axis of the container.
         */
        "alignItems"?: FlexAlignItems;
        /**
          * The direction of the main axis.
         */
        "direction"?: FlexDirection;
        /**
          * Explicitly controls the space between flex items. It applies that spacing only between items not on the outer edges. It can be one value for row & column gap, or two values to set row & column gaps differently. Accepts an RDS layout value or a valid CSS length value.
         */
        "gap"?: FlexGap;
        /**
          * Explicitly controls the height of the flex component. This can be pixel, em, rem, calc(), or % values.
         */
        "height"?: FlexHeight;
        /**
          * If true, the flex container is displayed at inline level rather than block level.
         */
        "inline"?: FlexInline;
        /**
          * Space between and around flex items along the main axis of the container.
         */
        "justifyContent"?: FlexJustifyContent;
        /**
          * Whether or not the flex items should wrap to a new line when necessary.
         */
        "wrap"?: FlexWrap;
    }
    interface RdsFlexItem {
        /**
          * Overrides a flex item's alignItems value on the cross-axis.
         */
        "alignSelf"?: FlexItemAlignSelf;
        /**
          * Sets the initial main size of a flex item. Can be a pixel value or percentage.
         */
        "flexBasis"?: FlexItemBasis;
        /**
          * Sets the flex grow factor of a flex item's main size.
         */
        "flexGrow"?: FlexItemGrow;
        /**
          * Sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to this prop.
         */
        "flexShrink"?: FlexItemShrink;
        /**
          * Sets the order to lay out an item in a flex or grid container. Items in a flex component are sorted by ascending order value and then by their source code order.
         */
        "order"?: FlexItemOrder;
    }
    interface RdsFooter {
        /**
          * This determines display of the Confidentiality Notice
         */
        "confidentiality": boolean;
        /**
          * @deprecated This determines display of the Disclaimer
         */
        "disclaimer": boolean;
        /**
          * This determines display of the Help link
         */
        "help": boolean;
        /**
          * This allows the help link to have a dynamic e-mail
         */
        "helpHref": string;
        /**
          * This determines to set the footer at the bottom of the page.
         */
        "positionFixed": boolean;
        /**
          * This determines display of the Survey Link
         */
        "survey": boolean;
        /**
          * This is the url for the survey ("Give Feedback") url.
         */
        "surveyUrl": string;
    }
    interface RdsGrid {
        /**
          * If true will remove padding/gaps within columns.
         */
        "collapseGaps"?: boolean;
        /**
          * If true will remove padding/gaps within columns.
         */
        "collapseMargins"?: boolean;
        /**
          * Adds the align-items: "items-base" style property for flex grids. All flex items are aligned such that their flex container baselines align.
         */
        "itemsbase"?: boolean;
        /**
          * Adds the "items-center" style property for flex grids. This will align flex items to the middle of the flex container.
         */
        "itemscenter"?: boolean;
        /**
          * Adds the justify-content: "space-between" style property when type="flex". This adds space between each item in the flex box.
         */
        "justifybetween"?: boolean;
        /**
          * Adds the justify-content: "flex-end" style property when type="flex". This will pack flex items from the end or the right of the flex box.
         */
        "justifyend"?: boolean;
        /**
          * Type is used to set the grid component to 'flex' or 'grid'
         */
        "type"?: string;
    }
    interface RdsGridCol {
        /**
          * The number of columns this column spans from the smallest breakpoint and above.
         */
        "colspan"?: string;
        /**
          * The number of columns this column spans from the large breakpoint and above.
         */
        "colspanLg"?: string;
        /**
          * The number of columns this column spans from the medium breakpoint and above.
         */
        "colspanMd"?: string;
        /**
          * The number of columns this column spans from the extra large breakpoint and above.
         */
        "colspanXl"?: string;
    }
    interface RdsHeader {
        /**
          * This property removes the mobile navigation bars from mobile when a navigation component doesn't exist.
         */
        "nav": boolean;
        "sidebar": string;
        /**
          * @deprecated Determines the header type. Options are: 'base' for latest, leave blank for default layout.
         */
        "type"?: string;
    }
    interface RdsHeadline {
        /**
          * The color of the headline.
         */
        "color"?: TailwindColors | 'green';
        /**
          * The heading level is set to determine the heading tag to be applied
         */
        "level": HeadlineLevel;
        /**
          * Spacing controls the top and bottom margin on the headline tags.
         */
        "spacing": Spacing;
        /**
          * The weight for the headline.
         */
        "weight": TextWeight;
    }
    interface RdsHeroIcon {
        /**
          * Set the background color of the icon.
         */
        "bg": HeroIconBackground;
        /**
          * Controls the text color.
         */
        "color"?: TailwindColors;
        /**
          * Set the name of the icon to implement.
         */
        "name": string;
        /**
          * Set the shape around the icon. This is important if using the `bg` prop.
         */
        "shape": HeroIconShape;
        /**
          * Set the size of the icon.  Values: md (16x16), lg (24x24), xl (32x32)
         */
        "size": HeroIconSize;
        /**
          * Set the type of the icon.
         */
        "type": HeroIconType;
    }
    interface RdsIcon {
        /**
          * @deprecated Set the alternative text of the icon
         */
        "alt": string;
        /**
          * @deprecated Sets the color of the icon. Setting no color will inherit from its parent.
         */
        "color": string;
        /**
          * @deprecated Set the name of the icon to implement
         */
        "icon": string;
        /**
          * @deprecated Set the size of the icon. Values: md (16x16), lg (24x24), xlg (32x32)
         */
        "size": string;
    }
    interface RdsImage {
        /**
          * Set the alternative text of the image
         */
        "alt": string;
        /**
          * Set the caption text that is displayed under the image
         */
        "caption": string;
        /**
          * Set the detail text that is displayed under the title text in a lightbox
         */
        "detail": string;
        /**
          * Set the title text that is displayed above image in a lightbox
         */
        "headline": string;
        /**
          * Set tabindex when inside a lightbox
         */
        "interactive": boolean;
        /**
          * Display headline next to image?
         */
        "showHeadline": boolean;
        /**
          * Size options for thumbnail: 'sm', 'md', 'lg' and 'full'
         */
        "size": string;
        /**
          * Set the source url of the image
         */
        "src": string;
        /**
          * Size options for small thumb, medium thumb, and large
         */
        "thumbnail": boolean;
    }
    interface RdsIndicator {
        /**
          * Color to set the indicator. Options are 'success' (green), 'warning' (yellow), 'alert' (red), 'primary' (purple), 'secondary' (blue), 'tertiary' (gray), 'primary-alt (purple-ring) and tertiary-alt (white).
         */
        "appearance": IndicatorAppearance;
    }
    interface RdsInput {
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete": AutocompleteTypes;
        "customValidator"?: Array<string | ValidatorEntry | Validator<string>>;
        /**
          * If `true`, input is set to disabled mode.
         */
        "disabled": boolean;
        /**
          * If `true`, input will be in error/invalid mode.
         */
        "error": boolean;
        /**
          * Returns the `<input>` element.
         */
        "getInputElement": () => Promise<HTMLInputElement>;
        /**
          * @deprecated If `true`, and slot contents are fulfilled, help text will appear below input component
         */
        "helptext": boolean;
        /**
          * @deprecated If `true`, icon will be displayed at the end of input component that will be on the right side
         */
        "iconend": boolean;
        /**
          * @deprecated If `true`, icon will be displayed on start of input component that will be on left side
         */
        "iconstart": boolean;
        /**
          * Whether or not the leading addon to your input is inline.
         */
        "inlineLeading": boolean;
        /**
          * Whether or not the leading addon to your input is inline.
         */
        "inlineTrailing": boolean;
        /**
          * Label to be displayed in relation to its `RdsInput` component
         */
        "label": string;
        /**
          * Defines maximum value allowed in number input and text input for min/max date..
         */
        "max"?: string;
        /**
          * Defines maximum number of character allowed.
         */
        "maxlength"?: number;
        /**
          * Defines minimum value allowed in number input and text input for min/max date.
         */
        "min"?: string;
        /**
          * Defines minimum number of character allowed.
         */
        "minlength"?: number;
        /**
          * The name attribute of the input element.
         */
        "name": string;
        /**
          * Defines regex pattern that input's value must match.
         */
        "pattern"?: string;
        /**
          * Placeholder text to be displayed inside the `<input>` component
         */
        "placeholder"?: string | null;
        /**
          * If `true`, input is set to readonly mode.
         */
        "readonly": boolean;
        /**
          * Whether or not the input component is required.
         */
        "required": boolean;
        /**
          * Sets blur on the `<input>` for `RdsInput`. Use this method instead of `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the `<input>` for `RdsInput`. Use this method instead of `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * Specifies the interval between legal numbers in number input and text input for min/max date.
         */
        "step"?: string;
        /**
          * The type attribute of the input element.
         */
        "type": InputType;
        /**
          * If `true`, the input will be validated against the constraint validators that are set.
         */
        "validate"?: boolean;
        /**
          * Validates the `<input>` element.
         */
        "validateConstraint": () => Promise<boolean>;
        /**
          * Validates the `<input>` element.
         */
        "validateCustom": () => Promise<void>;
        /**
          * Defines the custom validation of the input. You must pass the array and object(s) as defined in the custom validation docs as a string so it can be parsed properly in all instances. Ex: '[{"name":"length", "options": {"min": 1, "max": 5}}]'
         */
        "validator"?: string;
        /**
          * The value of the input element.
         */
        "value"?: string | number | null;
    }
    interface RdsInputDatePicker {
        /**
          * Expand or collapse when calendar does not have input
         */
        "active": boolean;
        /**
          * Selected end date
         */
        "end"?: string;
        /**
          * @deprecated - Use valueByDate instead Selected end date as full date object
         */
        "endAsDate"?: Date;
        /**
          * Number at which section headings should start for this component.
         */
        "headingLevel": number;
        /**
          * Place the calendar icon in either leading or trailing position by setting the values as true/false respectively. Default value is true
         */
        "iconStart"?: boolean;
        /**
          * Localized string for "next month" (used for aria label)
          * @default "Next month"
         */
        "intlNextMonth"?: string;
        /**
          * Localized string for "previous month" (used for aria label)
          * @default "Previous month"
         */
        "intlPrevMonth"?: string;
        /**
          * Layout
         */
        "layout": 'horizontal' | 'vertical';
        /**
          * BCP 47 language tag for desired language and country format
         */
        "locale"?: string;
        /**
          * Latest allowed date ("yyyy-mm-dd")
         */
        "max"?: string;
        /**
          * Latest allowed date as full date object
         */
        "maxAsDate"?: Date;
        /**
          * Earliest allowed date ("yyyy-mm-dd")
         */
        "min"?: string;
        /**
          * Earliest allowed date as full date object
         */
        "minAsDate"?: Date;
        /**
          * Describes the type of positioning to use for the overlaid content. If your element is in a fixed container, use the 'fixed' value.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Disables the default behaviour on the third click of narrowing or extending the range and instead starts a new range.
         */
        "proximitySelectionDisabled"?: boolean;
        /**
          * Range mode activation
         */
        "range"?: boolean;
        "reposition": () => Promise<void>;
        /**
          * Whether or not the date picker is required.
         */
        "required"?: boolean;
        /**
          * Selected start date
         */
        "start"?: string;
        /**
          * @deprecated - Use valueByDate instead Selected start date as full date object
         */
        "startAsDate"?: Date;
        /**
          * If `true`, the date picker will be validated against the constraint validators that are set.
         */
        "validate"?: boolean;
        /**
          * Selected date
         */
        "value"?: string | string[];
        /**
          * Selected date as full date object
         */
        "valueAsDate"?: Date | Date[];
    }
    interface RdsLabel {
        /**
          * If `true`, label is set to disabled mode. Set up to inherit from the parent `RdsInput` component.
         */
        "disabled": boolean;
        /**
          * What the label is for; connects label to corresponding form element
         */
        "for": string;
        /**
          * If `true`, input is set to readonly mode.    * Set up to inherit from the parent `RdsInput` component.
         */
        "readonly": boolean;
    }
    interface RdsLightbox {
        /**
          * Focus first interactive element
         */
        "focusElement": (el?: HTMLElement) => Promise<void>;
        /**
          * Sets focus on the component.  By default, will try to focus on any focusable content. If there is none, it will focus on the close button. If you want to focus on the close button, you can use the `close-button` focus ID.
         */
        "setFocus": (focusId?: 'close-button') => Promise<void>;
        /**
          * The source url(s) of the image(s)
         */
        "src": Array<any>;
    }
    interface RdsLink {
        /**
          * The type of the link. Current options are: `"primary"`, `"secondary"`.
         */
        "appearance": string;
        /**
          * This property handles the disabled state of the link.
         */
        "disabled": boolean;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href": string | undefined;
        /**
          * Determines the padding on the link if an icon is the only contents.
         */
        "iconOnly": boolean;
        /**
          * Accessible label for link.
         */
        "label": string;
        /**
          * The link size. Options are: `"sm"` and `"base"`
         */
        "size"?: string;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target": string | undefined;
        /**
          * @deprecated You can now type within the link tags set the link text.
         */
        "text"?: string;
    }
    interface RdsList {
        /**
          * @deprecated Determines the visibility of a list.
         */
        "active": boolean;
        /**
          * If true, will place a horizontal border between description list items.
         */
        "divided": boolean;
        /**
          * Sets the width of the list item. If true, will not expand past its contents. If false, will reach full width possible.
         */
        "narrow": boolean;
        /**
          * If true, will zebra-stripe alternating description list items. List type must be `description` for this prop to take effect.
         */
        "striped": boolean;
        /**
          * Sets the type of the list.
         */
        "type": ListType;
    }
    interface RdsListItem {
        /**
          * @deprecated Determines the state of the list item for navigation purposes
         */
        "active": boolean;
        /**
          * If true, the list item will be split into two columns. This prop is created for description and stacked list items.
         */
        "columns": boolean;
        "divided": boolean;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href": string;
        /**
          * @deprecated Shows icon for main nav items only if true. If set to false, the chevron is hidden. Default This is useful for main nav items that don't have sub-nav items.
         */
        "icon": boolean;
        /**
          * @deprecated Determines the state of the list item for navigation purposes
         */
        "spacingX"?: string;
        /**
          * @deprecated Determines the state of the list item for navigation purposes
         */
        "spacingY"?: string;
        "striped": boolean;
        /**
          * @deprecated Set the target of the link of the list item. Set to "_blank" to open link in a new window.
         */
        "target": string;
        /**
          * Sets the type of the list item.
         */
        "type": ListItemType;
    }
    interface RdsMenu {
        /**
          * Closes the menu.
         */
        "closeMenu": () => Promise<void>;
        /**
          * Disables the automatic closing on menu item click.
         */
        "disableClose": boolean;
        /**
          * Sets the menu trigger to disabled
         */
        "disabled": boolean;
        /**
          * Sets the behavior of the menu trigger as hover instead of click.
         */
        "hover": boolean;
        /**
          * The open state of the menu.
         */
        "isOpen": boolean;
        /**
          * Offset the position of the popover away from the reference element.
         */
        "offsetDistance": number;
        /**
          * Offset the position of the popover along the reference element.
         */
        "offsetSkidding": number;
        /**
          * Opens the menu.
         */
        "openMenu": () => Promise<void>;
        /**
          * Describes the type of positioning to use for the overlaid content.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Sets the position of the menu.
         */
        "position": PopperPlacement;
        "reposition": () => Promise<void>;
        /**
          * Sets the scrolling of the panel on the menu.
         */
        "scrolling": boolean;
        /**
          * Toggles the dropshadow on the panel.
          * @deprecated
         */
        "shadow": boolean;
        /**
          * Toggles the menu.
         */
        "toggleMenu": () => Promise<void>;
        /**
          * Sets the width of the panel.
          * @deprecated
         */
        "width": MenuWidth;
    }
    interface RdsMenuItem {
        /**
          * Set the disabled state of a menu item.
         */
        "disabled"?: boolean;
        /**
          * Adds a divider to a menu item.
         */
        "divider"?: boolean;
        /**
          * The value of the menu item.
         */
        "value"?: string;
    }
    interface RdsMeta {
        /**
          * The name of the icon to display. The value of this property must match the icon name from RDS Hero Icons
         */
        "icon"?: string;
    }
    interface RdsModal {
        /**
          * Optionally pass a function to run before close
         */
        "beforeClose": (el: HTMLElement) => Promise<void>;
        /**
          * Hides the close button in the top right of the modal to focus user to the action buttons.
         */
        "closeButton"?: boolean;
        "closeModal": () => Promise<any>;
        /**
          * Used to disable the default close on escape press.
         */
        "disableEscape"?: boolean;
        /**
          * Disables the closing of the Modal when clicking the overlay.
         */
        "disableOverlayClose"?: boolean;
        /**
          * Focus first interactive element
         */
        "focusElement": (el?: HTMLElement) => Promise<void>;
        /**
          * If true, the modal is in fullscreen mode.
         */
        "fullScreen": boolean;
        /**
          * The text displayed as the headline of the modal. You can optionally pass in HTML for headline by using the headline slot.
         */
        "headline": string;
        /**
          * Accessible label for Modal to use in the aria-label.
         */
        "label"?: string;
        "openModal": () => Promise<any>;
        /**
          * Sets focus on the component.  By default, will try to focus on any focusable content. If there is none, it will focus on the close button. If you want to focus on the close button, you can use the `close-button` focus ID.
         */
        "setFocus": (focusId?: 'close-button') => Promise<void>;
        /**
          * This sets the visiblity of the modal.
         */
        "visible": boolean;
    }
    interface RdsNav {
        /**
          * When set to true, the user can toggle the state of the navigation component.
         */
        "collapsible": boolean;
        /**
          * Indicates whether nav is expanded. If false, the nav is collapsed. Note: For 'base' nav only.
         */
        "expanded": boolean;
        /**
          * This is for an accessible label on the nav element. Please omit the use of the term "navigation".
         */
        "label": string;
        /**
          * @param focusId
          * @returns Sets focus to the nav.
         */
        "setFocus": (focusId?: 'expand-toggle') => Promise<void>;
        /**
          * @deprecated Determines the layout based on the journey. Options are: 'base' for latest, leave blank for Phase 1 layout.
         */
        "type"?: string;
    }
    interface RdsNavItem {
        /**
          * To show a nav item in an active state, this can be set to true.
         */
        "active": boolean;
        /**
          * If `true`, nav item is a child of another nav item.
         */
        "child": boolean;
        /**
          * If `true`, nav item will expand/collapse with the nav container. Set up to inherit from the parent `RdsNav` component.
         */
        "collapsible": boolean;
        /**
          * If `true`, nav item will expand/collapse with the nav container. Set up to inherit from the parent `RdsNav` component.
         */
        "expanded": boolean;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href": string;
        /**
          * If `true`, nav item is open and its slotted children are revealed.
         */
        "open": boolean;
        /**
          * Set the target of the link of the list item. Set to "_blank" to open link in a new window.
         */
        "target": string;
    }
    interface RdsPageHeading {
        /**
          * Text that is displayed as the page heading.
         */
        "text": string;
    }
    interface RdsPagination {
        /**
          * number of items per page
         */
        "items": number;
        /**
          * Go to the next page of results
         */
        "nextPage": () => Promise<void>;
        /**
          * Go to the previous page of results
         */
        "previousPage": () => Promise<void>;
        /**
          * index of item that should begin the page
         */
        "start": number;
        /**
          * total number of items
         */
        "total": number;
    }
    interface RdsPanel {
        /**
          * Closes the panel.
         */
        "close": () => Promise<boolean>;
        /**
          * If `true`, the panel will display a close button in the top right corner.
         */
        "closeButton": boolean;
        /**
          * If `true`, a fixed panel will disable the body scrollbar when open.
         */
        "disableBodyScroll": boolean;
        /**
          * If `true`, the panel is disabled.
         */
        "disabled": boolean;
        /**
          * Returns `true` if the panel is active.
         */
        "isActive": () => Promise<boolean>;
        /**
          * Returns `true` if the panel is open.
         */
        "isOpen": () => Promise<boolean>;
        /**
          * Sets the panel's headline level.
         */
        "level": HeadlineLevel;
        /**
          * Removes padding inside the panel.
         */
        "noPadding"?: boolean;
        /**
          * Opens the panel.
         */
        "open": () => Promise<boolean>;
        /**
          * Sets the ID of the panel.
         */
        "panelId"?: string;
        /**
          * Sets the panel's title.
         */
        "panelTitle"?: string;
        /**
          * When position is set to fixed, the panel will overlay content. Set position to 'push' to set display to inline-block;
         */
        "position": PanelPosition;
        /**
          * Opens or closes the panel. If the operation can't be completed successfully, it returns `false`.
         */
        "setOpen": (shouldOpen: boolean) => Promise<boolean>;
        /**
          * Toggles the panel. If the panel is already open, it will try to close, otherwise it will try to open it. If the operation can't be completed successfully, it returns `false`.
         */
        "toggle": () => Promise<boolean>;
        /**
          * If `true`, the panel to span 1/2 width of screen.
         */
        "wide": boolean;
    }
    interface RdsPanelToggle {
        /**
          * Automatically hides the content when the corresponding panel is not active.  By default, it's `true`. Change it to `false` in order to keep `rds-panel-toggle` always visible regardless the state of the panel.
         */
        "autoHide": boolean;
        /**
          * Optional property that maps to a Panel's `panelId` prop. Can also be `start` or `end` for the panel side. This is used to find the correct panel to toggle.  If this property is not used, `rds-panel-toggle` will toggle the first panel that is active.
         */
        "panel"?: string;
    }
    interface RdsPill {
    }
    interface RdsProfile {
    }
    interface RdsProgressBar {
        /**
          * Sets the label for the progress bar.
         */
        "label": string;
        /**
          * The maximum value of the component. The progress prop cannot exceed this.
         */
        "maximumValue": number;
        /**
          * Updates the progress of the component and triggers an animation.  Functionality is same as changing the property.
          * @param newProgress The new progress is set
         */
        "updateProgress": (newProgress: number, needsReflect?: boolean) => Promise<void>;
        /**
          * The initial progress value.
         */
        "value": number;
    }
    interface RdsProgressCircle {
        /**
          * Sets the label for the progress circle.
         */
        "label": string;
        /**
          * Set the size of the progress circle, default is md. Available Options are: sm, md and lg
         */
        "size"?: string;
        /**
          * Sets the percentage value to be displayed as well as the amount of the circle to be filled.
         */
        "value": string;
    }
    interface RdsRadioButton {
        /**
          * This property directly maps to the checked attribute on the native input.
         */
        "checked": boolean;
        /**
          * This property directly maps to the disabled attribute of the native input.
         */
        "disabled": boolean;
        "emitCheckedChange": () => Promise<void>;
        /**
          * If `true`, radio will be in error/invalid mode.
         */
        "error": boolean;
        /**
          * The focused state of the radio button.
          * @private
         */
        "focused": boolean;
        /**
          * Get the value of radio button input
         */
        "getValue": () => Promise<string>;
        /**
          * If `true`, radio is inside a radio-button-group component.
         */
        "group": boolean;
        /**
          * The id attribute of the radio button.  When omitted, a globally unique identifier is used.
         */
        "guid": string;
        /**
          * An accessible label to be given to the input.
         */
        "label"?: string;
        /**
          * This property maps to the name attribute of the native input to ensure a single value to be selected with the same name.
         */
        "name": string;
        /**
          * Whether or not the radio is required.
         */
        "required": boolean;
        "setFocus": (e: any) => Promise<void>;
        /**
          * Set the appearance type of the radio.
         */
        "type": RadioType;
        /**
          * If `true`, the radio will be validated against the constraint validators that are set.
         */
        "validate": boolean;
        /**
          * Validates the radio button's `input` element.
         */
        "validateConstraint": () => Promise<void>;
        /**
          * The value of the radio element
         */
        "value": any;
    }
    interface RdsRadioButtonGroup {
        /**
          * Sets the direction of the individual radio buttons
         */
        "direction": RadioGroupDirection;
        /**
          * Sets the disabled property of all slotted radio buttons
         */
        "disabled": boolean;
        /**
          * Sets the label for the entire radio button group
         */
        "label": string;
        /**
          * Sets the name property of all slotted radio buttons
         */
        "name": string;
        /**
          * Sets the required property of all slotted checkboxes
         */
        "required": boolean;
        /**
          * Sets the type property of all slotted radio buttons
         */
        "type": RadioType;
        /**
          * If `true`, the radio button group will be validated against the constraint validators that are set.
         */
        "validate"?: boolean;
        "validateConstraint": () => Promise<boolean>;
    }
    interface RdsSearch {
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete": AutocompleteTypes;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `rdsChange` event after each keystroke.
         */
        "debounce": number;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled": boolean;
        /**
          * Sets the input's placeholder text.
         */
        "placeholder": string;
        /**
          * Sets focus on the specified `rds-search`. Use this method instead of the global `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        /**
          * The value of the search input.
         */
        "value"?: string | null;
    }
    interface RdsSectionHeading {
        /**
          * Sets the section's headline level.
         */
        "level": HeadlineLevel;
        /**
          * Text that is displayed as the page heading.
         */
        "text": string;
    }
    interface RdsSelect {
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete": AutocompleteTypes;
        "customSelected": any;
        /**
          * If `true`, select is set to disabled mode.
         */
        "disabled": boolean;
        /**
          * If `true`, select will be in error/invalid mode.
         */
        "error": boolean;
        /**
          * @deprecated If `true`, and slot contents are fulfilled, help text will appear below select component.
         */
        "helptext": boolean;
        /**
          * Label to be displayed in relation to its `RdsSelect` component.
         */
        "label": string;
        /**
          * if `true` multi-select mode will be enabled.
         */
        "multiple": boolean;
        /**
          * The name attribute of the select element.
         */
        "name": string;
        /**
          * If `true` select is using native HTML for select. Otherwise, will be a custom element.
         */
        "native": boolean;
        /**
          * Whether or not the select component is required.
         */
        "required": boolean;
        /**
          * If `true`, the select will be validated against the constraint validators that are set.
         */
        "validate"?: boolean;
        "validateConstraint": () => Promise<boolean>;
        /**
          * @deprecated The width of the select component.
         */
        "width": string;
    }
    interface RdsSkeleton {
        /**
          * Number of rows of current skeleton type
         */
        "count": number;
        /**
          * Height of the skeleton. Include px like '100px'.
         */
        "height": string;
        /**
          * Optional bottom margin of the skeleton ex. 10px, 0 etc.
         */
        "marginBottom": string;
        /**
          * Variant of the skeleton 'circle' | 'rect' | 'text'
         */
        "variant": string;
        /**
          * Width of the skeleton. Include px like '100px'.
         */
        "width": string;
    }
    interface RdsSnackbar {
        /**
          * The appearance of the Snackbar. Options are: `"info"`, `"error"`, and `"success"`.
         */
        "appearance": SnackbarAppearance;
        /**
          * If set to `false`, the snackbar will not hide unless dismissed by the user
         */
        "autoHide": boolean;
        /**
          * When autoHide is true, this determines the length of time (in milliseconds) the snackbar is displayed.
         */
        "autoHideDuration": number;
        "close": () => Promise<void>;
        /**
          * The appearance of the Snackbar. Options are: `"info"`, `"error"`, and `"success"`.
          * @deprecated - please use 'appearance' prop instead.
         */
        "severity": SnackbarAppearance;
        /**
          * If set to `false`, the snackbar will be hidden.
         */
        "visible": boolean;
    }
    interface RdsSpinner {
        /**
          * Set the size of the spinner.  Default: md (48x48)  Values: sm (32x32), md (48x48), lg (64x64), xl (80x80)
         */
        "size": SizesAll;
    }
    interface RdsStepper {
        /**
          * Sets the last step as active.
         */
        "endStep": () => Promise<void>;
        /**
          * Sets the requested step as active.
         */
        "goToStep": (num: number) => Promise<void>;
        /**
          * Sets the next step as active.
         */
        "nextStep": () => Promise<void>;
        /**
          * Sets the previous step as active.
         */
        "prevStep": () => Promise<void>;
        "requestedContent": HTMLElement[] | NodeListOf<any>;
        /**
          * Sets the first step as active.
         */
        "startStep": () => Promise<void>;
        /**
          * Sets the type of the stepper.
         */
        "type": StepperType;
        /**
          * For complex, bullet, and circle steppers. If true, will display stepper vertically and with the stepper item text.
         */
        "vertical": boolean;
    }
    interface RdsStepperItem {
        /**
          * If `true`, the step is active.
         */
        "active": boolean;
        /**
          * If `true`, the step been completed.
         */
        "complete": boolean;
        /**
          * @deprecated Sets a complex stepper item's description text. Note: This will only apply to stepper's with `type='complex'`
         */
        "description"?: string;
        /**
          * Determines if this stepper item is disabled and not engageable by the user.
         */
        "disabled": boolean;
        /**
          * Pass the name of the hero icon you'd like displayed. Note: This will only apply to stepper's with the default `type` of _simple_.
         */
        "icon": string;
        /**
          * Sets the simple stepper's headline level.
         */
        "level": HeadlineLevel;
        /**
          * Sets the stepper item's title text.
         */
        "text"?: string;
        /**
          * Sets the type of stepper item to display.
         */
        "type": StepperType;
        /**
          * For complex, circle, and bullet steppers only. If true, will display stepper vertically and with the stepper item text.
         */
        "vertical"?: boolean;
    }
    interface RdsSubLabel {
        /**
          * Sets up the input id if the string is passed.
         */
        "for": string;
        "groupChecked": boolean;
        /**
          * If type is 'headline', the sub-label's color will be gray-500.
         */
        "type": SubLabelType;
    }
    interface RdsTab {
        /**
          * If `true`, the tab appears in an active state.
         */
        "active": boolean;
        /**
          * Sets the appearance type of the individual tab. Set up to inherit from the parent `RdsTabs` component.
         */
        "appearance"?: Appearance;
        /**
          * If `true`, the user cannot interact with the tab.
         */
        "disabled": boolean;
        /**
          * Return the index of this tab within the tab array
         */
        "getTabIndex": () => Promise<number>;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href": string | undefined;
        /**
          * The selected tab component
          * @deprecated
         */
        "selected": boolean;
        /**
          * Set the active component for the tab
         */
        "setActive": () => Promise<void>;
        /**
          * A tab id must be provided for each `rds-tab`. It's used internally to reference the selected tab to switch between them.
         */
        "tab": string;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target": string | undefined;
        /**
          * A value for the mobile selected tab.
         */
        "value": string;
    }
    interface RdsTable {
        /**
          * Sets caption text for table component. This is for accessibility purposes. Text is visually hidden but accessible to screen readers.
         */
        "caption": string;
        /**
          * Sets the table cell's padding to 'compact' mode.
         */
        "compact": boolean;
        /**
          * Sets the table row's to 'group' mode.
         */
        "groupedRows": boolean;
        /**
          * Sets the table top column to 'stacked' mode and turn into a card view on mobile.
         */
        "mobileStacked": boolean;
        /**
          * Sets the table row's background color to 'striped' mode.
         */
        "striped": boolean;
        /**
          * Adds `vertical lines` between table columns.
         */
        "verticalLines": boolean;
    }
    interface RdsTableCell {
        /**
          * Text alignment for the cell. Options are: `"left"` (default), `"center"` and `"right"`.
         */
        "align": string;
        "compact": boolean;
        /**
          * Hides the column in mobile view when sets to true and cell prop type is head.
         */
        "mobileHide": boolean;
        "mobileStacked": boolean;
        /**
          * Type of the cell. Options are: `"data"` (default) and `"head"`.
         */
        "type": string;
        "verticalLines": boolean;
        /**
          * If visible is set to `"true"` columns will stack in mobile view .
         */
        "visible": boolean;
    }
    interface RdsTableRow {
        /**
          * If group is set to `"true"` cell will take its own full space to cover all the table row.
         */
        "group": boolean;
        "groupedRows": boolean;
        "striped": boolean;
    }
    interface RdsTabs {
        /**
          * Sets the appearance type of the tabs container
         */
        "appearance"?: TabAppearance;
        /**
          * Get the currently selected tab.
         */
        "getSelected": () => Promise<string | undefined>;
        /**
          * Get a specific tab by the value of its `tab` property or an element reference.
          * @param tab The tab instance to select. If passed a string, it should be the value of the tab's `tab` property.
         */
        "getTab": (tab: string | HTMLRdsTabElement) => Promise<HTMLRdsTabElement | undefined>;
        /**
          * An accessible label of the tab section.
         */
        "label": string;
        /**
          * Select a tab by the value of its `tab` property or an element reference.
          * @param tab The tab instance to select. If passed a string, it should be the value of the tab's `tab` property.
         */
        "select": (tab: string | HTMLRdsTabElement) => Promise<boolean>;
    }
    interface RdsText {
        /**
          * The alignment of the text. Reflects as a text-align CSS property.
         */
        "align": TextAlign;
        /**
          * Controls the text color.
         */
        "color"?: TailwindColors;
        /**
          * The size of the text. Reflects as a font-size CSS property.
         */
        "size": TextSize;
        /**
          * The spacing of the text. Spacing controls the top and bottom margin on the headline tags.
         */
        "spacing": Spacing;
        /**
          * The tag type of the text. `inline` returns a span tag. `p` renders a p tag.
         */
        "type": TextType;
        /**
          * The weight for the text.
         */
        "weight": TextWeight;
    }
    interface RdsTextarea {
        /**
          * @deprecated Specifies the visible number of cols in a text area
         */
        "cols": number;
        /**
          * If `true`, textarea is set to disabled mode.
         */
        "disabled": boolean;
        /**
          * If `true`, textarea will be in error/invalid mode.
         */
        "error": boolean;
        /**
          * Returns the `<textarea>` element.
         */
        "getInputElement": () => Promise<HTMLTextAreaElement>;
        /**
          * @deprecated If `true`, and slot contents are fulfilled, help text will appear below input component
         */
        "helptext": boolean;
        /**
          * Label to be displayed in relation to its `RdsTextarea` component
         */
        "label": string;
        /**
          * Defines maximum number of character allowed.
         */
        "maxlength"?: number;
        /**
          * Defines minimum number of character allowed.
         */
        "minlength"?: number;
        /**
          * The name attribute of the textarea element.
         */
        "name": string;
        /**
          * Placeholder text to be displayed inside the `<textarea>` component
         */
        "placeholder"?: string | null;
        /**
          * If `true`, textarea is set to readonly mode.
         */
        "readonly": boolean;
        /**
          * Whether or not the textarea component is required.
         */
        "required": boolean;
        /**
          * Whether resize is to be enabled on the textarea component.
         */
        "resize": TextareaResize;
        /**
          * @deprecated Specifies the visible number of lines in a text area
         */
        "rows": number;
        /**
          * Sets blur on the `<textarea>` for `rds-textarea`. Use this method instead of `input.blur()`.
         */
        "setBlur": () => Promise<void>;
        /**
          * Sets focus on the `<textarea>` for `rds-textarea`. Use this method instead of `input.focus()`.
         */
        "setFocus": () => Promise<void>;
        "triggerFocusEvents": boolean;
        /**
          * If `true`, the textarea will be validated against the constraint validators that are set.
         */
        "validate"?: boolean;
        "validateConstraint": () => Promise<void>;
        /**
          * The value of the textarea element
         */
        "value"?: string | null;
    }
    interface RdsToggle {
        /**
          * When true, the user cannot engage with the toggle
         */
        "disabled"?: boolean;
        /**
          * Label to be displayed next to RdsToggle
         */
        "label": string;
        /**
          * The name of the input for the toggle
         */
        "name"?: string;
        /**
          * When true, the toggle will display as switched.
         */
        "switched": boolean;
        /**
          * The value of the input for the toggle
         */
        "value"?: any;
    }
    interface RdsTooltip {
        /**
          * Accessible name for the component
         */
        "label": string;
        /**
          * Offset the position of the popover away from the reference element.
          * @default 6
         */
        "offsetDistance": number;
        /**
          * Offset the position of the popover along the reference element.
         */
        "offsetSkidding": number;
        /**
          * Display and position the component.
         */
        "open": boolean;
        /**
          * Describes the type of positioning to use for the overlaid content. If your element is in a fixed container, use the 'fixed' value.
         */
        "overlayPositioning": OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the referenceElement.
         */
        "position": PopperPlacement;
        /**
          * Reference HTMLElement used to position this component according to the placement property. As a convenience, a string ID of the reference element can be used. However, setting this property to use an HTMLElement is preferred so that the component does not need to query the DOM for the referenceElement.
         */
        "referenceElement": HTMLElement | string;
        "reposition": () => Promise<void>;
        /**
          * Size sets the max-width of the tooltip container. The available options are sm, md and lg.
          * @deprecated
         */
        "size": TooltipSize;
        /**
          * Tooltip Text. Text can be displayed by simply placing the text inside of the Tooltip.
          * @deprecated
         */
        "text": string;
    }
    interface RdsTooltipManager {
        "focused": boolean;
        /**
          * CSS Selector to match reference elements for tooltips. Reference elements will be identified by this selector in order to open their associated tooltip.
          * @default `[data-rds-tooltip-reference]`
         */
        "selector": string;
    }
    interface RdsWorkflowFooter {
        /**
          * If `true`, workflow footer will be fixed to the bottom of the user's screen.
         */
        "sticky": boolean;
    }
    interface RdsWorkflowHeader {
    }
}
export interface RdsAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsAccordionElement;
}
export interface RdsAccordionItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsAccordionItemElement;
}
export interface RdsActionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsActionElement;
}
export interface RdsActionBarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsActionBarElement;
}
export interface RdsAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsAlertElement;
}
export interface RdsBannerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsBannerElement;
}
export interface RdsButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsButtonElement;
}
export interface RdsCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsCheckboxElement;
}
export interface RdsCheckboxGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsCheckboxGroupElement;
}
export interface RdsChipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsChipElement;
}
export interface RdsComboboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsComboboxElement;
}
export interface RdsComboboxItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsComboboxItemElement;
}
export interface RdsDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsDatePickerElement;
}
export interface RdsDatePickerDayCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsDatePickerDayElement;
}
export interface RdsDatePickerMonthCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsDatePickerMonthElement;
}
export interface RdsDatePickerMonthHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsDatePickerMonthHeaderElement;
}
export interface RdsFabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsFabElement;
}
export interface RdsFileUploaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsFileUploaderElement;
}
export interface RdsFileUploaderFileCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsFileUploaderFileElement;
}
export interface RdsFileUploaderProgressCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsFileUploaderProgressElement;
}
export interface RdsFooterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsFooterElement;
}
export interface RdsHeaderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsHeaderElement;
}
export interface RdsImageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsImageElement;
}
export interface RdsInputCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsInputElement;
}
export interface RdsInputDatePickerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsInputDatePickerElement;
}
export interface RdsListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsListItemElement;
}
export interface RdsMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsMenuElement;
}
export interface RdsMenuItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsMenuItemElement;
}
export interface RdsModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsModalElement;
}
export interface RdsNavCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsNavElement;
}
export interface RdsPaginationCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsPaginationElement;
}
export interface RdsPanelCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsPanelElement;
}
export interface RdsRadioButtonCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsRadioButtonElement;
}
export interface RdsSearchCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsSearchElement;
}
export interface RdsSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsSelectElement;
}
export interface RdsSnackbarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsSnackbarElement;
}
export interface RdsStepperCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsStepperElement;
}
export interface RdsStepperItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsStepperItemElement;
}
export interface RdsTabCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsTabElement;
}
export interface RdsTabsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsTabsElement;
}
export interface RdsTextareaCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsTextareaElement;
}
export interface RdsToggleCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsToggleElement;
}
export interface RdsTooltipCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLRdsTooltipElement;
}
declare global {
    interface HTMLRdsAccordionElement extends Components.RdsAccordion, HTMLStencilElement {
    }
    var HTMLRdsAccordionElement: {
        prototype: HTMLRdsAccordionElement;
        new (): HTMLRdsAccordionElement;
    };
    interface HTMLRdsAccordionItemElement extends Components.RdsAccordionItem, HTMLStencilElement {
    }
    var HTMLRdsAccordionItemElement: {
        prototype: HTMLRdsAccordionItemElement;
        new (): HTMLRdsAccordionItemElement;
    };
    interface HTMLRdsActionElement extends Components.RdsAction, HTMLStencilElement {
    }
    var HTMLRdsActionElement: {
        prototype: HTMLRdsActionElement;
        new (): HTMLRdsActionElement;
    };
    interface HTMLRdsActionBarElement extends Components.RdsActionBar, HTMLStencilElement {
    }
    var HTMLRdsActionBarElement: {
        prototype: HTMLRdsActionBarElement;
        new (): HTMLRdsActionBarElement;
    };
    interface HTMLRdsAlertElement extends Components.RdsAlert, HTMLStencilElement {
    }
    var HTMLRdsAlertElement: {
        prototype: HTMLRdsAlertElement;
        new (): HTMLRdsAlertElement;
    };
    interface HTMLRdsAppLayoutElement extends Components.RdsAppLayout, HTMLStencilElement {
    }
    var HTMLRdsAppLayoutElement: {
        prototype: HTMLRdsAppLayoutElement;
        new (): HTMLRdsAppLayoutElement;
    };
    interface HTMLRdsAvatarElement extends Components.RdsAvatar, HTMLStencilElement {
    }
    var HTMLRdsAvatarElement: {
        prototype: HTMLRdsAvatarElement;
        new (): HTMLRdsAvatarElement;
    };
    interface HTMLRdsBadgeElement extends Components.RdsBadge, HTMLStencilElement {
    }
    var HTMLRdsBadgeElement: {
        prototype: HTMLRdsBadgeElement;
        new (): HTMLRdsBadgeElement;
    };
    interface HTMLRdsBannerElement extends Components.RdsBanner, HTMLStencilElement {
    }
    var HTMLRdsBannerElement: {
        prototype: HTMLRdsBannerElement;
        new (): HTMLRdsBannerElement;
    };
    interface HTMLRdsBoxElement extends Components.RdsBox, HTMLStencilElement {
    }
    var HTMLRdsBoxElement: {
        prototype: HTMLRdsBoxElement;
        new (): HTMLRdsBoxElement;
    };
    interface HTMLRdsBreadcrumbElement extends Components.RdsBreadcrumb, HTMLStencilElement {
    }
    var HTMLRdsBreadcrumbElement: {
        prototype: HTMLRdsBreadcrumbElement;
        new (): HTMLRdsBreadcrumbElement;
    };
    interface HTMLRdsBreadcrumbsElement extends Components.RdsBreadcrumbs, HTMLStencilElement {
    }
    var HTMLRdsBreadcrumbsElement: {
        prototype: HTMLRdsBreadcrumbsElement;
        new (): HTMLRdsBreadcrumbsElement;
    };
    interface HTMLRdsButtonElement extends Components.RdsButton, HTMLStencilElement {
    }
    var HTMLRdsButtonElement: {
        prototype: HTMLRdsButtonElement;
        new (): HTMLRdsButtonElement;
    };
    interface HTMLRdsButtonGroupElement extends Components.RdsButtonGroup, HTMLStencilElement {
    }
    var HTMLRdsButtonGroupElement: {
        prototype: HTMLRdsButtonGroupElement;
        new (): HTMLRdsButtonGroupElement;
    };
    interface HTMLRdsCardBodyElement extends Components.RdsCardBody, HTMLStencilElement {
    }
    var HTMLRdsCardBodyElement: {
        prototype: HTMLRdsCardBodyElement;
        new (): HTMLRdsCardBodyElement;
    };
    interface HTMLRdsCardContainerElement extends Components.RdsCardContainer, HTMLStencilElement {
    }
    var HTMLRdsCardContainerElement: {
        prototype: HTMLRdsCardContainerElement;
        new (): HTMLRdsCardContainerElement;
    };
    interface HTMLRdsCardFooterElement extends Components.RdsCardFooter, HTMLStencilElement {
    }
    var HTMLRdsCardFooterElement: {
        prototype: HTMLRdsCardFooterElement;
        new (): HTMLRdsCardFooterElement;
    };
    interface HTMLRdsCardHeaderElement extends Components.RdsCardHeader, HTMLStencilElement {
    }
    var HTMLRdsCardHeaderElement: {
        prototype: HTMLRdsCardHeaderElement;
        new (): HTMLRdsCardHeaderElement;
    };
    interface HTMLRdsCardLocationsElement extends Components.RdsCardLocations, HTMLStencilElement {
    }
    var HTMLRdsCardLocationsElement: {
        prototype: HTMLRdsCardLocationsElement;
        new (): HTMLRdsCardLocationsElement;
    };
    interface HTMLRdsCardMediaElement extends Components.RdsCardMedia, HTMLStencilElement {
    }
    var HTMLRdsCardMediaElement: {
        prototype: HTMLRdsCardMediaElement;
        new (): HTMLRdsCardMediaElement;
    };
    interface HTMLRdsCardTitleElement extends Components.RdsCardTitle, HTMLStencilElement {
    }
    var HTMLRdsCardTitleElement: {
        prototype: HTMLRdsCardTitleElement;
        new (): HTMLRdsCardTitleElement;
    };
    interface HTMLRdsCheckboxElement extends Components.RdsCheckbox, HTMLStencilElement {
    }
    var HTMLRdsCheckboxElement: {
        prototype: HTMLRdsCheckboxElement;
        new (): HTMLRdsCheckboxElement;
    };
    interface HTMLRdsCheckboxGroupElement extends Components.RdsCheckboxGroup, HTMLStencilElement {
    }
    var HTMLRdsCheckboxGroupElement: {
        prototype: HTMLRdsCheckboxGroupElement;
        new (): HTMLRdsCheckboxGroupElement;
    };
    interface HTMLRdsChipElement extends Components.RdsChip, HTMLStencilElement {
    }
    var HTMLRdsChipElement: {
        prototype: HTMLRdsChipElement;
        new (): HTMLRdsChipElement;
    };
    interface HTMLRdsComboboxElement extends Components.RdsCombobox, HTMLStencilElement {
    }
    var HTMLRdsComboboxElement: {
        prototype: HTMLRdsComboboxElement;
        new (): HTMLRdsComboboxElement;
    };
    interface HTMLRdsComboboxItemElement extends Components.RdsComboboxItem, HTMLStencilElement {
    }
    var HTMLRdsComboboxItemElement: {
        prototype: HTMLRdsComboboxItemElement;
        new (): HTMLRdsComboboxItemElement;
    };
    interface HTMLRdsContactElement extends Components.RdsContact, HTMLStencilElement {
    }
    var HTMLRdsContactElement: {
        prototype: HTMLRdsContactElement;
        new (): HTMLRdsContactElement;
    };
    interface HTMLRdsDatePickerElement extends Components.RdsDatePicker, HTMLStencilElement {
    }
    var HTMLRdsDatePickerElement: {
        prototype: HTMLRdsDatePickerElement;
        new (): HTMLRdsDatePickerElement;
    };
    interface HTMLRdsDatePickerDayElement extends Components.RdsDatePickerDay, HTMLStencilElement {
    }
    var HTMLRdsDatePickerDayElement: {
        prototype: HTMLRdsDatePickerDayElement;
        new (): HTMLRdsDatePickerDayElement;
    };
    interface HTMLRdsDatePickerMonthElement extends Components.RdsDatePickerMonth, HTMLStencilElement {
    }
    var HTMLRdsDatePickerMonthElement: {
        prototype: HTMLRdsDatePickerMonthElement;
        new (): HTMLRdsDatePickerMonthElement;
    };
    interface HTMLRdsDatePickerMonthHeaderElement extends Components.RdsDatePickerMonthHeader, HTMLStencilElement {
    }
    var HTMLRdsDatePickerMonthHeaderElement: {
        prototype: HTMLRdsDatePickerMonthHeaderElement;
        new (): HTMLRdsDatePickerMonthHeaderElement;
    };
    interface HTMLRdsDividerElement extends Components.RdsDivider, HTMLStencilElement {
    }
    var HTMLRdsDividerElement: {
        prototype: HTMLRdsDividerElement;
        new (): HTMLRdsDividerElement;
    };
    interface HTMLRdsErrorPageElement extends Components.RdsErrorPage, HTMLStencilElement {
    }
    var HTMLRdsErrorPageElement: {
        prototype: HTMLRdsErrorPageElement;
        new (): HTMLRdsErrorPageElement;
    };
    interface HTMLRdsFabElement extends Components.RdsFab, HTMLStencilElement {
    }
    var HTMLRdsFabElement: {
        prototype: HTMLRdsFabElement;
        new (): HTMLRdsFabElement;
    };
    interface HTMLRdsFileListElement extends Components.RdsFileList, HTMLStencilElement {
    }
    var HTMLRdsFileListElement: {
        prototype: HTMLRdsFileListElement;
        new (): HTMLRdsFileListElement;
    };
    interface HTMLRdsFileUploaderElement extends Components.RdsFileUploader, HTMLStencilElement {
    }
    var HTMLRdsFileUploaderElement: {
        prototype: HTMLRdsFileUploaderElement;
        new (): HTMLRdsFileUploaderElement;
    };
    interface HTMLRdsFileUploaderFileElement extends Components.RdsFileUploaderFile, HTMLStencilElement {
    }
    var HTMLRdsFileUploaderFileElement: {
        prototype: HTMLRdsFileUploaderFileElement;
        new (): HTMLRdsFileUploaderFileElement;
    };
    interface HTMLRdsFileUploaderProgressElement extends Components.RdsFileUploaderProgress, HTMLStencilElement {
    }
    var HTMLRdsFileUploaderProgressElement: {
        prototype: HTMLRdsFileUploaderProgressElement;
        new (): HTMLRdsFileUploaderProgressElement;
    };
    interface HTMLRdsFilterElement extends Components.RdsFilter, HTMLStencilElement {
    }
    var HTMLRdsFilterElement: {
        prototype: HTMLRdsFilterElement;
        new (): HTMLRdsFilterElement;
    };
    interface HTMLRdsFlexElement extends Components.RdsFlex, HTMLStencilElement {
    }
    var HTMLRdsFlexElement: {
        prototype: HTMLRdsFlexElement;
        new (): HTMLRdsFlexElement;
    };
    interface HTMLRdsFlexItemElement extends Components.RdsFlexItem, HTMLStencilElement {
    }
    var HTMLRdsFlexItemElement: {
        prototype: HTMLRdsFlexItemElement;
        new (): HTMLRdsFlexItemElement;
    };
    interface HTMLRdsFooterElement extends Components.RdsFooter, HTMLStencilElement {
    }
    var HTMLRdsFooterElement: {
        prototype: HTMLRdsFooterElement;
        new (): HTMLRdsFooterElement;
    };
    interface HTMLRdsGridElement extends Components.RdsGrid, HTMLStencilElement {
    }
    var HTMLRdsGridElement: {
        prototype: HTMLRdsGridElement;
        new (): HTMLRdsGridElement;
    };
    interface HTMLRdsGridColElement extends Components.RdsGridCol, HTMLStencilElement {
    }
    var HTMLRdsGridColElement: {
        prototype: HTMLRdsGridColElement;
        new (): HTMLRdsGridColElement;
    };
    interface HTMLRdsHeaderElement extends Components.RdsHeader, HTMLStencilElement {
    }
    var HTMLRdsHeaderElement: {
        prototype: HTMLRdsHeaderElement;
        new (): HTMLRdsHeaderElement;
    };
    interface HTMLRdsHeadlineElement extends Components.RdsHeadline, HTMLStencilElement {
    }
    var HTMLRdsHeadlineElement: {
        prototype: HTMLRdsHeadlineElement;
        new (): HTMLRdsHeadlineElement;
    };
    interface HTMLRdsHeroIconElement extends Components.RdsHeroIcon, HTMLStencilElement {
    }
    var HTMLRdsHeroIconElement: {
        prototype: HTMLRdsHeroIconElement;
        new (): HTMLRdsHeroIconElement;
    };
    interface HTMLRdsIconElement extends Components.RdsIcon, HTMLStencilElement {
    }
    var HTMLRdsIconElement: {
        prototype: HTMLRdsIconElement;
        new (): HTMLRdsIconElement;
    };
    interface HTMLRdsImageElement extends Components.RdsImage, HTMLStencilElement {
    }
    var HTMLRdsImageElement: {
        prototype: HTMLRdsImageElement;
        new (): HTMLRdsImageElement;
    };
    interface HTMLRdsIndicatorElement extends Components.RdsIndicator, HTMLStencilElement {
    }
    var HTMLRdsIndicatorElement: {
        prototype: HTMLRdsIndicatorElement;
        new (): HTMLRdsIndicatorElement;
    };
    interface HTMLRdsInputElement extends Components.RdsInput, HTMLStencilElement {
    }
    var HTMLRdsInputElement: {
        prototype: HTMLRdsInputElement;
        new (): HTMLRdsInputElement;
    };
    interface HTMLRdsInputDatePickerElement extends Components.RdsInputDatePicker, HTMLStencilElement {
    }
    var HTMLRdsInputDatePickerElement: {
        prototype: HTMLRdsInputDatePickerElement;
        new (): HTMLRdsInputDatePickerElement;
    };
    interface HTMLRdsLabelElement extends Components.RdsLabel, HTMLStencilElement {
    }
    var HTMLRdsLabelElement: {
        prototype: HTMLRdsLabelElement;
        new (): HTMLRdsLabelElement;
    };
    interface HTMLRdsLightboxElement extends Components.RdsLightbox, HTMLStencilElement {
    }
    var HTMLRdsLightboxElement: {
        prototype: HTMLRdsLightboxElement;
        new (): HTMLRdsLightboxElement;
    };
    interface HTMLRdsLinkElement extends Components.RdsLink, HTMLStencilElement {
    }
    var HTMLRdsLinkElement: {
        prototype: HTMLRdsLinkElement;
        new (): HTMLRdsLinkElement;
    };
    interface HTMLRdsListElement extends Components.RdsList, HTMLStencilElement {
    }
    var HTMLRdsListElement: {
        prototype: HTMLRdsListElement;
        new (): HTMLRdsListElement;
    };
    interface HTMLRdsListItemElement extends Components.RdsListItem, HTMLStencilElement {
    }
    var HTMLRdsListItemElement: {
        prototype: HTMLRdsListItemElement;
        new (): HTMLRdsListItemElement;
    };
    interface HTMLRdsMenuElement extends Components.RdsMenu, HTMLStencilElement {
    }
    var HTMLRdsMenuElement: {
        prototype: HTMLRdsMenuElement;
        new (): HTMLRdsMenuElement;
    };
    interface HTMLRdsMenuItemElement extends Components.RdsMenuItem, HTMLStencilElement {
    }
    var HTMLRdsMenuItemElement: {
        prototype: HTMLRdsMenuItemElement;
        new (): HTMLRdsMenuItemElement;
    };
    interface HTMLRdsMetaElement extends Components.RdsMeta, HTMLStencilElement {
    }
    var HTMLRdsMetaElement: {
        prototype: HTMLRdsMetaElement;
        new (): HTMLRdsMetaElement;
    };
    interface HTMLRdsModalElement extends Components.RdsModal, HTMLStencilElement {
    }
    var HTMLRdsModalElement: {
        prototype: HTMLRdsModalElement;
        new (): HTMLRdsModalElement;
    };
    interface HTMLRdsNavElement extends Components.RdsNav, HTMLStencilElement {
    }
    var HTMLRdsNavElement: {
        prototype: HTMLRdsNavElement;
        new (): HTMLRdsNavElement;
    };
    interface HTMLRdsNavItemElement extends Components.RdsNavItem, HTMLStencilElement {
    }
    var HTMLRdsNavItemElement: {
        prototype: HTMLRdsNavItemElement;
        new (): HTMLRdsNavItemElement;
    };
    interface HTMLRdsPageHeadingElement extends Components.RdsPageHeading, HTMLStencilElement {
    }
    var HTMLRdsPageHeadingElement: {
        prototype: HTMLRdsPageHeadingElement;
        new (): HTMLRdsPageHeadingElement;
    };
    interface HTMLRdsPaginationElement extends Components.RdsPagination, HTMLStencilElement {
    }
    var HTMLRdsPaginationElement: {
        prototype: HTMLRdsPaginationElement;
        new (): HTMLRdsPaginationElement;
    };
    interface HTMLRdsPanelElement extends Components.RdsPanel, HTMLStencilElement {
    }
    var HTMLRdsPanelElement: {
        prototype: HTMLRdsPanelElement;
        new (): HTMLRdsPanelElement;
    };
    interface HTMLRdsPanelToggleElement extends Components.RdsPanelToggle, HTMLStencilElement {
    }
    var HTMLRdsPanelToggleElement: {
        prototype: HTMLRdsPanelToggleElement;
        new (): HTMLRdsPanelToggleElement;
    };
    interface HTMLRdsPillElement extends Components.RdsPill, HTMLStencilElement {
    }
    var HTMLRdsPillElement: {
        prototype: HTMLRdsPillElement;
        new (): HTMLRdsPillElement;
    };
    interface HTMLRdsProfileElement extends Components.RdsProfile, HTMLStencilElement {
    }
    var HTMLRdsProfileElement: {
        prototype: HTMLRdsProfileElement;
        new (): HTMLRdsProfileElement;
    };
    interface HTMLRdsProgressBarElement extends Components.RdsProgressBar, HTMLStencilElement {
    }
    var HTMLRdsProgressBarElement: {
        prototype: HTMLRdsProgressBarElement;
        new (): HTMLRdsProgressBarElement;
    };
    interface HTMLRdsProgressCircleElement extends Components.RdsProgressCircle, HTMLStencilElement {
    }
    var HTMLRdsProgressCircleElement: {
        prototype: HTMLRdsProgressCircleElement;
        new (): HTMLRdsProgressCircleElement;
    };
    interface HTMLRdsRadioButtonElement extends Components.RdsRadioButton, HTMLStencilElement {
    }
    var HTMLRdsRadioButtonElement: {
        prototype: HTMLRdsRadioButtonElement;
        new (): HTMLRdsRadioButtonElement;
    };
    interface HTMLRdsRadioButtonGroupElement extends Components.RdsRadioButtonGroup, HTMLStencilElement {
    }
    var HTMLRdsRadioButtonGroupElement: {
        prototype: HTMLRdsRadioButtonGroupElement;
        new (): HTMLRdsRadioButtonGroupElement;
    };
    interface HTMLRdsSearchElement extends Components.RdsSearch, HTMLStencilElement {
    }
    var HTMLRdsSearchElement: {
        prototype: HTMLRdsSearchElement;
        new (): HTMLRdsSearchElement;
    };
    interface HTMLRdsSectionHeadingElement extends Components.RdsSectionHeading, HTMLStencilElement {
    }
    var HTMLRdsSectionHeadingElement: {
        prototype: HTMLRdsSectionHeadingElement;
        new (): HTMLRdsSectionHeadingElement;
    };
    interface HTMLRdsSelectElement extends Components.RdsSelect, HTMLStencilElement {
    }
    var HTMLRdsSelectElement: {
        prototype: HTMLRdsSelectElement;
        new (): HTMLRdsSelectElement;
    };
    interface HTMLRdsSkeletonElement extends Components.RdsSkeleton, HTMLStencilElement {
    }
    var HTMLRdsSkeletonElement: {
        prototype: HTMLRdsSkeletonElement;
        new (): HTMLRdsSkeletonElement;
    };
    interface HTMLRdsSnackbarElement extends Components.RdsSnackbar, HTMLStencilElement {
    }
    var HTMLRdsSnackbarElement: {
        prototype: HTMLRdsSnackbarElement;
        new (): HTMLRdsSnackbarElement;
    };
    interface HTMLRdsSpinnerElement extends Components.RdsSpinner, HTMLStencilElement {
    }
    var HTMLRdsSpinnerElement: {
        prototype: HTMLRdsSpinnerElement;
        new (): HTMLRdsSpinnerElement;
    };
    interface HTMLRdsStepperElement extends Components.RdsStepper, HTMLStencilElement {
    }
    var HTMLRdsStepperElement: {
        prototype: HTMLRdsStepperElement;
        new (): HTMLRdsStepperElement;
    };
    interface HTMLRdsStepperItemElement extends Components.RdsStepperItem, HTMLStencilElement {
    }
    var HTMLRdsStepperItemElement: {
        prototype: HTMLRdsStepperItemElement;
        new (): HTMLRdsStepperItemElement;
    };
    interface HTMLRdsSubLabelElement extends Components.RdsSubLabel, HTMLStencilElement {
    }
    var HTMLRdsSubLabelElement: {
        prototype: HTMLRdsSubLabelElement;
        new (): HTMLRdsSubLabelElement;
    };
    interface HTMLRdsTabElement extends Components.RdsTab, HTMLStencilElement {
    }
    var HTMLRdsTabElement: {
        prototype: HTMLRdsTabElement;
        new (): HTMLRdsTabElement;
    };
    interface HTMLRdsTableElement extends Components.RdsTable, HTMLStencilElement {
    }
    var HTMLRdsTableElement: {
        prototype: HTMLRdsTableElement;
        new (): HTMLRdsTableElement;
    };
    interface HTMLRdsTableCellElement extends Components.RdsTableCell, HTMLStencilElement {
    }
    var HTMLRdsTableCellElement: {
        prototype: HTMLRdsTableCellElement;
        new (): HTMLRdsTableCellElement;
    };
    interface HTMLRdsTableRowElement extends Components.RdsTableRow, HTMLStencilElement {
    }
    var HTMLRdsTableRowElement: {
        prototype: HTMLRdsTableRowElement;
        new (): HTMLRdsTableRowElement;
    };
    interface HTMLRdsTabsElement extends Components.RdsTabs, HTMLStencilElement {
    }
    var HTMLRdsTabsElement: {
        prototype: HTMLRdsTabsElement;
        new (): HTMLRdsTabsElement;
    };
    interface HTMLRdsTextElement extends Components.RdsText, HTMLStencilElement {
    }
    var HTMLRdsTextElement: {
        prototype: HTMLRdsTextElement;
        new (): HTMLRdsTextElement;
    };
    interface HTMLRdsTextareaElement extends Components.RdsTextarea, HTMLStencilElement {
    }
    var HTMLRdsTextareaElement: {
        prototype: HTMLRdsTextareaElement;
        new (): HTMLRdsTextareaElement;
    };
    interface HTMLRdsToggleElement extends Components.RdsToggle, HTMLStencilElement {
    }
    var HTMLRdsToggleElement: {
        prototype: HTMLRdsToggleElement;
        new (): HTMLRdsToggleElement;
    };
    interface HTMLRdsTooltipElement extends Components.RdsTooltip, HTMLStencilElement {
    }
    var HTMLRdsTooltipElement: {
        prototype: HTMLRdsTooltipElement;
        new (): HTMLRdsTooltipElement;
    };
    interface HTMLRdsTooltipManagerElement extends Components.RdsTooltipManager, HTMLStencilElement {
    }
    var HTMLRdsTooltipManagerElement: {
        prototype: HTMLRdsTooltipManagerElement;
        new (): HTMLRdsTooltipManagerElement;
    };
    interface HTMLRdsWorkflowFooterElement extends Components.RdsWorkflowFooter, HTMLStencilElement {
    }
    var HTMLRdsWorkflowFooterElement: {
        prototype: HTMLRdsWorkflowFooterElement;
        new (): HTMLRdsWorkflowFooterElement;
    };
    interface HTMLRdsWorkflowHeaderElement extends Components.RdsWorkflowHeader, HTMLStencilElement {
    }
    var HTMLRdsWorkflowHeaderElement: {
        prototype: HTMLRdsWorkflowHeaderElement;
        new (): HTMLRdsWorkflowHeaderElement;
    };
    interface HTMLElementTagNameMap {
        "rds-accordion": HTMLRdsAccordionElement;
        "rds-accordion-item": HTMLRdsAccordionItemElement;
        "rds-action": HTMLRdsActionElement;
        "rds-action-bar": HTMLRdsActionBarElement;
        "rds-alert": HTMLRdsAlertElement;
        "rds-app-layout": HTMLRdsAppLayoutElement;
        "rds-avatar": HTMLRdsAvatarElement;
        "rds-badge": HTMLRdsBadgeElement;
        "rds-banner": HTMLRdsBannerElement;
        "rds-box": HTMLRdsBoxElement;
        "rds-breadcrumb": HTMLRdsBreadcrumbElement;
        "rds-breadcrumbs": HTMLRdsBreadcrumbsElement;
        "rds-button": HTMLRdsButtonElement;
        "rds-button-group": HTMLRdsButtonGroupElement;
        "rds-card-body": HTMLRdsCardBodyElement;
        "rds-card-container": HTMLRdsCardContainerElement;
        "rds-card-footer": HTMLRdsCardFooterElement;
        "rds-card-header": HTMLRdsCardHeaderElement;
        "rds-card-locations": HTMLRdsCardLocationsElement;
        "rds-card-media": HTMLRdsCardMediaElement;
        "rds-card-title": HTMLRdsCardTitleElement;
        "rds-checkbox": HTMLRdsCheckboxElement;
        "rds-checkbox-group": HTMLRdsCheckboxGroupElement;
        "rds-chip": HTMLRdsChipElement;
        "rds-combobox": HTMLRdsComboboxElement;
        "rds-combobox-item": HTMLRdsComboboxItemElement;
        "rds-contact": HTMLRdsContactElement;
        "rds-date-picker": HTMLRdsDatePickerElement;
        "rds-date-picker-day": HTMLRdsDatePickerDayElement;
        "rds-date-picker-month": HTMLRdsDatePickerMonthElement;
        "rds-date-picker-month-header": HTMLRdsDatePickerMonthHeaderElement;
        "rds-divider": HTMLRdsDividerElement;
        "rds-error-page": HTMLRdsErrorPageElement;
        "rds-fab": HTMLRdsFabElement;
        "rds-file-list": HTMLRdsFileListElement;
        "rds-file-uploader": HTMLRdsFileUploaderElement;
        "rds-file-uploader-file": HTMLRdsFileUploaderFileElement;
        "rds-file-uploader-progress": HTMLRdsFileUploaderProgressElement;
        "rds-filter": HTMLRdsFilterElement;
        "rds-flex": HTMLRdsFlexElement;
        "rds-flex-item": HTMLRdsFlexItemElement;
        "rds-footer": HTMLRdsFooterElement;
        "rds-grid": HTMLRdsGridElement;
        "rds-grid-col": HTMLRdsGridColElement;
        "rds-header": HTMLRdsHeaderElement;
        "rds-headline": HTMLRdsHeadlineElement;
        "rds-hero-icon": HTMLRdsHeroIconElement;
        "rds-icon": HTMLRdsIconElement;
        "rds-image": HTMLRdsImageElement;
        "rds-indicator": HTMLRdsIndicatorElement;
        "rds-input": HTMLRdsInputElement;
        "rds-input-date-picker": HTMLRdsInputDatePickerElement;
        "rds-label": HTMLRdsLabelElement;
        "rds-lightbox": HTMLRdsLightboxElement;
        "rds-link": HTMLRdsLinkElement;
        "rds-list": HTMLRdsListElement;
        "rds-list-item": HTMLRdsListItemElement;
        "rds-menu": HTMLRdsMenuElement;
        "rds-menu-item": HTMLRdsMenuItemElement;
        "rds-meta": HTMLRdsMetaElement;
        "rds-modal": HTMLRdsModalElement;
        "rds-nav": HTMLRdsNavElement;
        "rds-nav-item": HTMLRdsNavItemElement;
        "rds-page-heading": HTMLRdsPageHeadingElement;
        "rds-pagination": HTMLRdsPaginationElement;
        "rds-panel": HTMLRdsPanelElement;
        "rds-panel-toggle": HTMLRdsPanelToggleElement;
        "rds-pill": HTMLRdsPillElement;
        "rds-profile": HTMLRdsProfileElement;
        "rds-progress-bar": HTMLRdsProgressBarElement;
        "rds-progress-circle": HTMLRdsProgressCircleElement;
        "rds-radio-button": HTMLRdsRadioButtonElement;
        "rds-radio-button-group": HTMLRdsRadioButtonGroupElement;
        "rds-search": HTMLRdsSearchElement;
        "rds-section-heading": HTMLRdsSectionHeadingElement;
        "rds-select": HTMLRdsSelectElement;
        "rds-skeleton": HTMLRdsSkeletonElement;
        "rds-snackbar": HTMLRdsSnackbarElement;
        "rds-spinner": HTMLRdsSpinnerElement;
        "rds-stepper": HTMLRdsStepperElement;
        "rds-stepper-item": HTMLRdsStepperItemElement;
        "rds-sub-label": HTMLRdsSubLabelElement;
        "rds-tab": HTMLRdsTabElement;
        "rds-table": HTMLRdsTableElement;
        "rds-table-cell": HTMLRdsTableCellElement;
        "rds-table-row": HTMLRdsTableRowElement;
        "rds-tabs": HTMLRdsTabsElement;
        "rds-text": HTMLRdsTextElement;
        "rds-textarea": HTMLRdsTextareaElement;
        "rds-toggle": HTMLRdsToggleElement;
        "rds-tooltip": HTMLRdsTooltipElement;
        "rds-tooltip-manager": HTMLRdsTooltipManagerElement;
        "rds-workflow-footer": HTMLRdsWorkflowFooterElement;
        "rds-workflow-header": HTMLRdsWorkflowHeaderElement;
    }
}
declare namespace LocalJSX {
    interface RdsAccordion {
        "onRdsAccordionChange"?: (event: RdsAccordionCustomEvent<any>) => void;
        /**
          * This determines the selection mode for the accordion item. If single, it will close other accordionitems when one is clicked.
         */
        "selectionMode"?: string;
    }
    interface RdsAccordionItem {
        "active"?: boolean;
        /**
          * The text displayed for the accordion item title. You may use this prop instead of the slot if you are only adding plain text as the title.
         */
        "itemTitle"?: string;
        "onRdsAccordionItemClose"?: (event: RdsAccordionItemCustomEvent<any>) => void;
        "onRdsAccordionItemKeyEvent"?: (event: RdsAccordionItemCustomEvent<any>) => void;
        "onRdsAccordionItemRegister"?: (event: RdsAccordionItemCustomEvent<any>) => void;
        "onRdsAccordionItemSelect"?: (event: RdsAccordionItemCustomEvent<any>) => void;
        "padding"?: boolean;
    }
    interface RdsAction {
        /**
          * Indicates whether the action is highlighted.
         */
        "active"?: boolean;
        /**
          * When true, disabled prevents interaction. This state shows actions grayed out.
         */
        "disabled"?: boolean;
        /**
          * The name of the icon to display. The value of this property must match the icon name from RDS Icons
         */
        "icon"?: string;
        /**
          * The label of the action.
         */
        "label"?: string;
        /**
          * Emitted when the action has been clicked.
         */
        "onRdsActionClick"?: (event: RdsActionCustomEvent<any>) => void;
        /**
          * Text that accompanies the action icon.
         */
        "text": string;
        /**
          * Indicates whether the text is displayed.
         */
        "textEnabled"?: boolean;
    }
    interface RdsActionBar {
        /**
          * If `true`, action bar will stay in collapsed/non expandable state.
         */
        "collapsible"?: boolean;
        /**
          * Emitted when expanded has been toggled.
         */
        "onRdsActionBarToggle"?: (event: RdsActionBarCustomEvent<any>) => void;
    }
    interface RdsAlert {
        /**
          * The appearance of the Alert. Options are: `"info"`, `"error"`, `"warning"`, and `"success"`.
         */
        "appearance"?: AlertAppearance;
        /**
          * If set to `true`, the alert has a dismiss button and is dismissible.
         */
        "dismissible"?: boolean;
        /**
          * This is for an accessible label on the primary action.
         */
        "label"?: string;
        /**
          * Emitted when the action has been clicked.
         */
        "onRdsActionClick"?: (event: RdsAlertCustomEvent<any>) => void;
        /**
          * Emitted when the alert has been dismissed.
         */
        "onRdsAlertDismiss"?: (event: RdsAlertCustomEvent<any>) => void;
        /**
          * If set to `false`, the alert will be hidden.
         */
        "visible"?: boolean;
    }
    interface RdsAppLayout {
        /**
          * @deprecated Sets whether the background of the content region is FM Gray or FM White on Default/Phase 1 and Workflow App Layouts.
         */
        "backgroundColor"?: string;
        /**
          * This property can change the width of the header from auto to full-screen.
         */
        "headerWidth"?: AppLayoutHeaderWidth;
        /**
          * @deprecated Sets the display of the flyout slot for slide out content
         */
        "panel"?: boolean;
        "preventScroll"?: boolean;
        /**
          * Sets whether the sidebars are displayed Options are: left, right, both, none
         */
        "sidebar"?: AppLayoutSidebar;
        /**
          * @deprecated Determines the layout based on the journey. 'base' for latest design; undefined for phase 1 design.
         */
        "type"?: AppLayoutType;
    }
    interface RdsAvatar {
        /**
          * @deprecated Set the drop shadow of the avatar for the deprecated phase 1 avatar.
         */
        "shadow"?: boolean;
        /**
          * Set the size of the avatar, default is lg. Options are: sm, md, lg and xl
         */
        "size"?: string;
        /**
          * Set the image src for the image used as the avatar
         */
        "src"?: string;
        /**
          * Set the fallback initials when no image is present.
         */
        "text"?: string;
    }
    interface RdsBadge {
        /**
          * Determines the badge color. Options: 'gray', 'red', 'yellow', 'green', 'orange', 'blue' and 'purple'.
         */
        "color"?: BadgeColor;
        /**
          * A string value can be used instead of value if needed.
         */
        "text"?: string;
        /**
          * Set the number displayed in the badge.
         */
        "value"?: number;
    }
    interface RdsBanner {
        /**
          * The appearance of the banner.
         */
        "appearance"?: BannerAppearance;
        "dismissed"?: boolean;
        /**
          * If set to `true`, the banner will be dismissable.
         */
        "dismissible"?: boolean;
        /**
          * Emitted when the banner has been dismissed.
         */
        "onRdsBannerDismissed"?: (event: RdsBannerCustomEvent<any>) => void;
    }
    interface RdsBox {
        /**
          * Controls the background color of the component and its boundaries.
         */
        "bg"?: TailwindColors;
        /**
          * Controls the text color of all slotted contents.
         */
        "color"?: TailwindColors;
        /**
          * Sets the display type of the component.
         */
        "display"?: BoxDisplay;
        /**
          * Explicitly controls the margin around the component. This can be set using an RDS spacing value or a valid CSS length value.
         */
        "margin"?: BoxSpacing;
        /**
          * Explicitly controls the padding around the component. This can be set using an RDS spacing value or a valid CSS length value.
         */
        "padding"?: BoxSpacing;
        "styles"?: string;
    }
    interface RdsBreadcrumb {
        /**
          * Manages the responsive rendering of the component props.
         */
        "breakpoint"?: string;
        /**
          * If true, displays the caret in all breakpoints. If false, hides the caret on breakpoints 'md' and above. This is dynamically handled by the parent RdsBreadcrumbs component. It will be set to false for the first slotted RdsBreadcrumb.
         */
        "caret"?: boolean;
        /**
          * The separator of the Bread Crumbs. Options are: `"chevron"` and `"slash"`.
         */
        "separator"?: BreadCrumbsType;
        /**
          * If true, displays the slash in all breakpoints. If false, hides the slash on breakpoints 'md' and above. This is dynamically handled by the parent RdsBreadcrumbs component. It will be set to false for the first slotted RdsBreadcrumb.
         */
        "slash"?: boolean;
    }
    interface RdsBreadcrumbs {
        /**
          * The separator of the Bread Crumbs. Options are: `"chevron"` and `"slash"`.
         */
        "separator"?: BreadCrumbsType;
    }
    interface RdsButton {
        /**
          * Active state for button. To be used within a button group or as part of a menu (secondary & tertiary appearances only). When true, button will appear active.
         */
        "active"?: boolean;
        /**
          * The appearance of the button. The options are different depending on the button `type`. _Note: Appearance types have been updated as part of the Phase 2 experience._
         */
        "appearance"?: ButtonAppearance;
        /**
          * This property handles the disabled state of the button.
         */
        "disabled"?: boolean;
        /**
          * Adds button group specific styles.
          * @private
         */
        "group"?: boolean;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href"?: string | undefined;
        /**
          * Adds extra padding on the button if an icon is the only contents.
         */
        "iconOnly"?: boolean;
        /**
          * @deprecated Custom attribute that can be used when `rds-filter` is needed. It applies a customEvent to trigger `rds-filter`.
         */
        "isFilter"?: boolean;
        /**
          * Accessible label for button.
         */
        "label"?: string;
        /**
          * @deprecated
         */
        "onFilterToggleEvent"?: (event: RdsButtonCustomEvent<string>) => void;
        /**
          * If `true`, button is set to open mode. Adds styles to the button to indicate the menu is open. Set up to inherit from the parent `RdsMenu` component.
         */
        "open"?: boolean;
        /**
          * If `true`, button is set to selected mode. Adds styles to the button to indicate a menu item is selected. Set up to inherit from the parent `RdsMenu` component.
         */
        "selected"?: boolean;
        /**
          * The button size. _Note: The `"lg"` property is no longer full-width. See `"xl"` for full-width._
         */
        "size"?: SizesAll;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided.
         */
        "target"?: Target | undefined;
        /**
          * @deprecated Old way of setting button text. You can now type within the button tags set the button text.
         */
        "text"?: string;
        /**
          * The type of the button.
         */
        "type"?: ButtonType;
    }
    interface RdsButtonGroup {
        /**
          * If true, buttons are full-width and equally spaced on mobile screens.
         */
        "mobileFullWidth"?: boolean;
    }
    interface RdsCardBody {
        /**
          * If `true`, a 1rem (16px) padding will appear.
         */
        "padded"?: boolean;
    }
    interface RdsCardContainer {
        /**
          * If `true`, round corners will be enabled for the card container.
         */
        "rounded"?: boolean;
        /**
          * If `true`, a shadow will be visible around the card container.
         */
        "shadow"?: boolean;
        /**
          * If `true`, the card container will inherit styles that allow it to stand on its own, without any other card parts.
         */
        "simple"?: boolean;
    }
    interface RdsCardFooter {
        /**
          * If `true`, a 1rem (16px) padding will appear on left, right and bottom.
         */
        "padded"?: boolean;
        /**
          * If `true`, a top border will appear on the footer.
         */
        "rule"?: boolean;
    }
    interface RdsCardHeader {
        /**
          * If `true`, a 1rem (16px) padding will appear on left and right.
         */
        "padded"?: boolean;
        /**
          * If `true`, a bottom border will appear.
         */
        "rule"?: boolean;
    }
    interface RdsCardLocations {
        /**
          * @deprecated When error is true the card will display a message with a slot for action.
         */
        "error"?: boolean;
        /**
          * @deprecated When error is true the card will display a message with a slot for action.
         */
        "loading"?: boolean;
        /**
          * @deprecated When enabled, this will show the first number box for showing Location Count.
         */
        "showLocations"?: boolean;
    }
    interface RdsCardMedia {
        /**
          * Set the height of the media element.
         */
        "size"?: CardMediaSize;
        /**
          * Set the source url of the image.
         */
        "src"?: string;
        /**
          * Set the tag text of the image.
         */
        "tag"?: string;
    }
    interface RdsCardTitle {
        /**
          * Sets the headline level.
         */
        "level"?: HeadlineLevel;
    }
    interface RdsCheckbox {
        /**
          * Set the default checked value to false.
         */
        "checked"?: boolean;
        /**
          * Set the disabled state to false.
         */
        "disabled"?: boolean;
        /**
          * If `true`, checkbox will be in error/invalid mode.
         */
        "error"?: boolean;
        /**
          * If `true`, checkbox is inside a checkbox-group component.
         */
        "group"?: boolean;
        /**
          * Set the label string value.
         */
        "label"?: string;
        /**
          * The id of the element.
         */
        "name"?: string;
        /**
          * Emitted when the checkbox loses focus.
         */
        "onRdsOnBlur"?: (event: RdsCheckboxCustomEvent<void>) => void;
        /**
          * Emitted when the checked property has changed.
         */
        "onRdsOnChange"?: (event: RdsCheckboxCustomEvent<CheckboxChangeEventDetail>) => void;
        /**
          * Emitted when the checkbox has focus.
         */
        "onRdsOnFocus"?: (event: RdsCheckboxCustomEvent<void>) => void;
        /**
          * Whether or not the checkbox is required.
         */
        "required"?: boolean;
        /**
          * Set the appearance type of checkbox.
         */
        "type"?: CheckboxType;
        /**
          * If `true`, the checkbox will be validated against the constraint validators that are set.
         */
        "validate"?: boolean;
        /**
          * The value of the checkbox input.
         */
        "value"?: any;
    }
    interface RdsCheckboxGroup {
        /**
          * Sets the direction of the individual checkboxes
         */
        "direction"?: CheckboxGroupDirection;
        /**
          * Sets the disabled property of all slotted checkboxes.
         */
        "disabled"?: boolean;
        /**
          * Sets the label for the entire checkbox group
         */
        "label"?: string;
        /**
          * Sets the name property of all slotted checkboxes.
         */
        "name"?: string;
        /**
          * Emits when a checkbox within the group is selected/unselected.
         */
        "onRdsGroupOnChange"?: (event: RdsCheckboxGroupCustomEvent<CheckboxChangeEventDetail>) => void;
        /**
          * Sets the required property of all slotted checkboxes
         */
        "required"?: boolean;
        /**
          * Sets the type property of all slotted checkboxes.
         */
        "type"?: CheckboxType;
        /**
          * If `true`, the checkbox group will be validated against the constraint validators that are set.
         */
        "validate"?: boolean;
    }
    interface RdsChip {
        /**
          * Optionally set active to display in active state
         */
        "active"?: boolean;
        /**
          * Optionally make the Chip clickable
         */
        "clickable"?: boolean;
        /**
          * If `true`, the user cannot interact with the chip.
         */
        "disabled"?: boolean;
        /**
          * Optionally show a button the user can click to dismiss the chip
         */
        "dismissible"?: boolean;
        /**
          * Optionally pass an icon to display
          * @deprecated - a dot is provided for active Chips. Icons are no longer accepted inside the Chip.
         */
        "icon"?: string;
        /**
          * Emitted when the dismiss button is clicked
         */
        "onRdsChipClick"?: (event: RdsChipCustomEvent<any>) => void;
        /**
          * Emitted when the dismiss button is clicked
         */
        "onRdsChipDismiss"?: (event: RdsChipCustomEvent<any>) => void;
        /**
          * Text displayed inside of the Chip
         */
        "text"?: string;
        /**
          * Value to provide the Chip.
         */
        "value": any;
    }
    interface RdsCombobox {
        /**
          * Opens or closes the combobox
         */
        "active"?: boolean;
        /**
          * Disable combobox input
         */
        "disabled"?: boolean;
        /**
          * When true, there is an error in fetch.
         */
        "error"?: boolean;
        /**
          * Aria label for combobox (required)
         */
        "label": string;
        /**
          * When true, API is fetching data.
         */
        "loading"?: boolean;
        /**
          * Specify the maximum number of combobox items (including nested children) to display before showing the scroller
         */
        "maxItems"?: number;
        /**
          * The name of the switch input
         */
        "name"?: string;
        /**
          * When true, API is not returning the data.
         */
        "noResult"?: boolean;
        /**
          * Called when the selected item(s) changes.
         */
        "onRdsComboboxChange"?: (event: RdsComboboxCustomEvent<{ selectedItem: HTMLRdsComboboxItemElement }>) => void;
        /**
          * Fired when the combobox is closed
         */
        "onRdsComboboxClose"?: (event: RdsComboboxCustomEvent<any>) => void;
        /**
          * Called when the user has entered text to filter the options list
         */
        "onRdsComboboxFilterChange"?: (event: RdsComboboxCustomEvent<{
    visibleItems: HTMLRdsComboboxItemElement[];
    text: string;
  }>) => void;
        /**
          * Fired when the combobox is opened
         */
        "onRdsComboboxOpen"?: (event: RdsComboboxCustomEvent<any>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onRdsOnInput"?: (event: RdsComboboxCustomEvent<any>) => void;
        /**
          * Describes the type of positioning to use for the overlaid content. If your element is in a fixed container, use the 'fixed' value.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Placeholder text for input
         */
        "placeholder"?: string;
        /**
          * When true, the combobox is required.
         */
        "required"?: boolean;
        /**
          * If `true`, the combobox will be validated against the constraint validators that are set.
         */
        "validate"?: boolean;
        /**
          * The value(s) of the selectedItem(s)
         */
        "value"?: string;
    }
    interface RdsComboboxItem {
        /**
          * True when item is highlighted either from keyboard or mouse hover
         */
        "active"?: boolean;
        /**
          * When true, the item cannot be clicked and is visually muted.
         */
        "disabled"?: boolean;
        /**
          * Unique identifier, used for accessibility
         */
        "guid"?: string;
        /**
          * Emitted whenever the item is selected or unselected.
         */
        "onRdsComboboxItemChange"?: (event: RdsComboboxItemCustomEvent<any>) => void;
        /**
          * Set this to true to pre-select an item. Toggles when an item is checked/unchecked.
         */
        "selected"?: boolean;
        /**
          * The main label for this item.
         */
        "textLabel": string;
        /**
          * The item's associated value
         */
        "value": any;
    }
    interface RdsContact {
        /**
          * Initials shown when no image url provided.
         */
        "avatarText"?: string;
        /**
          * This will set the url for the image in Avatar, if needed.
         */
        "avatarUrl"?: string;
        /**
          * A third line of detail for additional information about the contact person.
         */
        "detail"?: string;
        /**
          * Name to be displayed.
         */
        "name"?: string;
        /**
          * Role or other details to be shown below the name.
         */
        "role"?: string;
    }
    interface RdsDatePicker {
        /**
          * Active range
         */
        "activeRange"?: 'start' | 'end';
        /**
          * Selected end date
          * @deprecated use value instead
         */
        "end"?: string;
        /**
          * Selected end date as full date object
          * @deprecated use valueAsDate instead
         */
        "endAsDate"?: Date;
        /**
          * Number at which section headings should start for this component.
         */
        "headingLevel"?: HeadlineLevel;
        /**
          * Localized string for "next month" (used for aria label)
          * @default "Next month"
         */
        "intlNextMonth"?: string;
        /**
          * Localized string for "previous month" (used for aria label)
          * @default "Previous month"
         */
        "intlPrevMonth"?: string;
        /**
          * Localized string for "year" (used for aria label)
          * @default "Year"
         */
        "intlYear"?: string;
        /**
          * BCP 47 language tag for desired language and country format
         */
        "locale"?: string;
        /**
          * Latest allowed date ("yyyy-mm-dd")
         */
        "max"?: string;
        /**
          * Latest allowed date as full date object
         */
        "maxAsDate"?: Date;
        /**
          * Earliest allowed date ("yyyy-mm-dd")
         */
        "min"?: string;
        /**
          * Earliest allowed date as full date object
         */
        "minAsDate"?: Date;
        /**
          * Trigger date change when a user changes the date.
         */
        "onRdsDatePickerChange"?: (event: RdsDatePickerCustomEvent<Date>) => void;
        /**
          * Trigger date change when a user changes the date range.
         */
        "onRdsDatePickerRangeChange"?: (event: RdsDatePickerCustomEvent<DateRangeChange>) => void;
        /**
          * Disables the default behaviour on the third click of narrowing or extending the range and instead starts a new range.
         */
        "proximitySelectionDisabled"?: boolean;
        /**
          * Range mode activation
         */
        "range"?: boolean;
        /**
          * Selected start date
          * @deprecated use value instead
         */
        "start"?: string;
        /**
          * Selected start date as full date object
          * @deprecated use valueAsDate instead
         */
        "startAsDate"?: Date;
        /**
          * Selected date
         */
        "value"?: string | string[];
        /**
          * Selected date as full date object
         */
        "valueAsDate"?: Date | Date[];
    }
    interface RdsDatePickerDay {
        /**
          * Date is actively in focus for keyboard navigation
         */
        "active"?: boolean;
        /**
          * Date is in the current month.
         */
        "currentMonth"?: boolean;
        /**
          * Day of the month to be shown.
         */
        "day"?: number;
        /**
          * Date is outside of range and can't be selected
         */
        "disabled"?: boolean;
        /**
          * Date is the end of date range
         */
        "endOfRange"?: boolean;
        /**
          * Date is currently highlighted as part of the range
         */
        "highlighted"?: boolean;
        /**
          * CLDR data for current locale
         */
        "localeData"?: DateLocaleData;
        /**
          * Emitted when user hovers over a day
         */
        "onRdsDayHover"?: (event: RdsDatePickerDayCustomEvent<any>) => void;
        /**
          * Emitted when user selects day
         */
        "onRdsDaySelect"?: (event: RdsDatePickerDayCustomEvent<any>) => void;
        /**
          * Showing date range
         */
        "range"?: boolean;
        "rangeHover"?: boolean;
        /**
          * Date is the current selected date of the picker
         */
        "selected"?: boolean;
        /**
          * Date is the start of date range
         */
        "startOfRange"?: boolean;
        /**
          * Date value for the day.
         */
        "value"?: Date;
    }
    interface RdsDatePickerMonth {
        /**
          * Date currently active.
         */
        "activeDate"?: Date;
        /**
          * End date currently active
         */
        "endDate"?: Date;
        /**
          * The range of dates currently being hovered
         */
        "hoverRange"?: HoverRange;
        /**
          * CLDR locale data for current locale
         */
        "localeData"?: DateLocaleData;
        /**
          * Maximum date of the calendar above which is disabled.
         */
        "max"?: Date;
        /**
          * Minimum date of the calendar below which is disabled.
         */
        "min"?: Date;
        /**
          * Active date for the user keyboard access.
         */
        "onRdsDatePickerActiveDateChange"?: (event: RdsDatePickerMonthCustomEvent<any>) => void;
        /**
          * Event emitted when user hovers the date.
         */
        "onRdsDatePickerHover"?: (event: RdsDatePickerMonthCustomEvent<any>) => void;
        "onRdsDatePickerMouseOut"?: (event: RdsDatePickerMonthCustomEvent<any>) => void;
        /**
          * Event emitted when user selects the date.
         */
        "onRdsDatePickerSelect"?: (event: RdsDatePickerMonthCustomEvent<any>) => void;
        /**
          * Already selected date.
         */
        "selectedDate"?: Date;
        /**
          * Start date currently active.
         */
        "startDate"?: Date;
    }
    interface RdsDatePickerMonthHeader {
        /**
          * Focused date with indicator (will become selected date if user proceeds)
         */
        "activeDate"?: Date;
        /**
          * Number at which section headings should start for this component.
         */
        "headingLevel"?: HeadlineLevel;
        /**
          * Localized string for next month.
         */
        "intlNextMonth"?: string;
        /**
          * Localized string for previous month.
         */
        "intlPrevMonth"?: string;
        /**
          * Localized string for year.
         */
        "intlYear"?: string;
        /**
          * User's language and region as BCP 47 formatted string.
         */
        "locale"?: string;
        /**
          * CLDR locale data for translated calendar info
         */
        "localeData"?: DateLocaleData;
        /**
          * Maximum date of the calendar above which is disabled.
         */
        "max"?: Date;
        /**
          * Minimum date of the calendar below which is disabled.
         */
        "min"?: Date;
        /**
          * Changes to active date
         */
        "onRdsDatePickerSelect"?: (event: RdsDatePickerMonthHeaderCustomEvent<Date>) => void;
        /**
          * Already selected date.
         */
        "selectedDate"?: Date;
    }
    interface RdsDivider {
        /**
          * @deprecated Sets the appearance/color of the divider.
         */
        "appearance"?: DividerAppearance;
        /**
          * This determines the spacing around the divider. It will add margin to top/bottom for horizonal dividers. It will add margin to left/right for vertical dividers.
         */
        "spacing"?: Spacing;
        /**
          * Sets which direction the divider is oriented.
         */
        "type"?: DividerDirection;
    }
    interface RdsErrorPage {
        /**
          * Renders the content of error page based on the error code also defaults to 404.
         */
        "errorCode"?: number;
    }
    interface RdsFab {
        /**
          * When true, disabled prevents interaction. This state will not emit the rdsFabClicked event when set to true.
         */
        "disabled"?: boolean;
        /**
          * What icon to be displayed. Icons can be found in our `RdsHeroIcon` component.
          * @default 'plus'
         */
        "icon"?: string;
        /**
          * Accessible label for button. If text is provided, text is used. Otherwise it will default to this label if text isn't provided.
         */
        "label"?: string;
        /**
          * Emitted when fab has been clicked.
         */
        "onRdsFabClicked"?: (event: RdsFabCustomEvent<any>) => void;
        /**
          * Sets the FAB button size.
         */
        "size"?: SizesSmMdLg;
        /**
          * Text that displays in the tooltip on FAB hover
         */
        "text"?: string;
        /**
          * This property can be used to disable the tooltip on hover. Default shows tooltip with text or label.
         */
        "tooltip"?: boolean;
    }
    interface RdsFileList {
        /**
          * The clickable property controls whether or not hover events occur on filelist. If true, the file list's hover state is shown.
         */
        "clickable"?: boolean;
    }
    interface RdsFileUploader {
        /**
          * Comma separated string; tells us what file formats file uploader should accept.
         */
        "accept"?: string;
        /**
          * Error message to display when format is invalid.
         */
        "acceptError"?: string;
        /**
          * Additional information to send to server other than the file.
         */
        "actionParams"?: any;
        /**
          * URL to make server call.
         */
        "actionURL"?: string;
        /**
          * File uploader description.
         */
        "description"?: string;
        /**
          * Error message when a file upload fails.
         */
        "fileUploadError"?: string;
        /**
          * Max files allowed to upload.
         */
        "filesLimit"?: number;
        /**
          * Maximum file size the file uploader must accept.
         */
        "maxFileSize"?: number;
        /**
          * Error message to display when file size exceeds limit.
         */
        "maxFileSizeError"?: string;
        /**
          * Error message when going beyond files limit.
         */
        "maxFilesLimitError"?: string;
        /**
          * Passes modifications to the xhr request.
         */
        "modifyRequest"?: (xhr: any) => any;
        /**
          * If multiple files are allowed.
         */
        "multiple"?: boolean;
        /**
          * Event that gets emitted when file is reuploaded
         */
        "onRdsFileReuploaded"?: (event: RdsFileUploaderCustomEvent<any>) => void;
        /**
          * Event that gets emitted when files get uploaded
         */
        "onRdsFilesUploaded"?: (event: RdsFileUploaderCustomEvent<any>) => void;
        /**
          * Event that gets emitted when component stage changes
         */
        "onRdsStageChanged"?: (event: RdsFileUploaderCustomEvent<any>) => void;
        /**
          * File uploader text.
         */
        "text"?: string;
    }
    interface RdsFileUploaderFile {
        /**
          * Sets the file id
         */
        "fileId"?: number;
        /**
          * Sets the file name
         */
        "name"?: string;
        /**
          * Event that gets triggered on file removal
         */
        "onRdsRemovedFile"?: (event: RdsFileUploaderFileCustomEvent<any>) => void;
    }
    interface RdsFileUploaderProgress {
        /**
          * Error text for the file upload
         */
        "error"?: string;
        /**
          * Sets the file id
         */
        "fileId": number;
        /**
          * Sets the file name
         */
        "fileName"?: string;
        /**
          * Event to emit in case of a retry
         */
        "onRdsRetriedUpload"?: (event: RdsFileUploaderProgressCustomEvent<any>) => void;
        /**
          * File upload progress
         */
        "progress"?: number;
    }
    interface RdsFilter {
        /**
          * @deprecated Apply filter search results for mobile breakpoints
         */
        "filterResults"?: number;
        /**
          * @deprecated Sets the toggle property of the filter component container
         */
        "isToggled"?: boolean;
        /**
          * @deprecated Accessible label for filter.
         */
        "label"?: string;
    }
    interface RdsFlex {
        /**
          * Space between and around flex items along the main-axis of the container, when the flex items span multiple lines. This only takes effect when `wrap` is set to true.
         */
        "alignContent"?: FlexAlignContent;
        /**
          * Space between and around flex items along the cross-axis of the container.
         */
        "alignItems"?: FlexAlignItems;
        /**
          * The direction of the main axis.
         */
        "direction"?: FlexDirection;
        /**
          * Explicitly controls the space between flex items. It applies that spacing only between items not on the outer edges. It can be one value for row & column gap, or two values to set row & column gaps differently. Accepts an RDS layout value or a valid CSS length value.
         */
        "gap"?: FlexGap;
        /**
          * Explicitly controls the height of the flex component. This can be pixel, em, rem, calc(), or % values.
         */
        "height"?: FlexHeight;
        /**
          * If true, the flex container is displayed at inline level rather than block level.
         */
        "inline"?: FlexInline;
        /**
          * Space between and around flex items along the main axis of the container.
         */
        "justifyContent"?: FlexJustifyContent;
        /**
          * Whether or not the flex items should wrap to a new line when necessary.
         */
        "wrap"?: FlexWrap;
    }
    interface RdsFlexItem {
        /**
          * Overrides a flex item's alignItems value on the cross-axis.
         */
        "alignSelf"?: FlexItemAlignSelf;
        /**
          * Sets the initial main size of a flex item. Can be a pixel value or percentage.
         */
        "flexBasis"?: FlexItemBasis;
        /**
          * Sets the flex grow factor of a flex item's main size.
         */
        "flexGrow"?: FlexItemGrow;
        /**
          * Sets the flex shrink factor of a flex item. If the size of all flex items is larger than the flex container, items shrink to fit according to this prop.
         */
        "flexShrink"?: FlexItemShrink;
        /**
          * Sets the order to lay out an item in a flex or grid container. Items in a flex component are sorted by ascending order value and then by their source code order.
         */
        "order"?: FlexItemOrder;
    }
    interface RdsFooter {
        /**
          * This determines display of the Confidentiality Notice
         */
        "confidentiality"?: boolean;
        /**
          * @deprecated This determines display of the Disclaimer
         */
        "disclaimer"?: boolean;
        /**
          * This determines display of the Help link
         */
        "help"?: boolean;
        /**
          * This allows the help link to have a dynamic e-mail
         */
        "helpHref"?: string;
        /**
          * Emitted when a footer link is clicked. Use the "onRdsFooterClicked" prop or listen for "rdsFooterClicked" event. This event will emit a string value depending on which link is clicked: "terms", "confidentiality", "privacy", "feedback" and "help"
         */
        "onRdsFooterClicked"?: (event: RdsFooterCustomEvent<any>) => void;
        /**
          * This determines to set the footer at the bottom of the page.
         */
        "positionFixed"?: boolean;
        /**
          * This determines display of the Survey Link
         */
        "survey"?: boolean;
        /**
          * This is the url for the survey ("Give Feedback") url.
         */
        "surveyUrl"?: string;
    }
    interface RdsGrid {
        /**
          * If true will remove padding/gaps within columns.
         */
        "collapseGaps"?: boolean;
        /**
          * If true will remove padding/gaps within columns.
         */
        "collapseMargins"?: boolean;
        /**
          * Adds the align-items: "items-base" style property for flex grids. All flex items are aligned such that their flex container baselines align.
         */
        "itemsbase"?: boolean;
        /**
          * Adds the "items-center" style property for flex grids. This will align flex items to the middle of the flex container.
         */
        "itemscenter"?: boolean;
        /**
          * Adds the justify-content: "space-between" style property when type="flex". This adds space between each item in the flex box.
         */
        "justifybetween"?: boolean;
        /**
          * Adds the justify-content: "flex-end" style property when type="flex". This will pack flex items from the end or the right of the flex box.
         */
        "justifyend"?: boolean;
        /**
          * Type is used to set the grid component to 'flex' or 'grid'
         */
        "type"?: string;
    }
    interface RdsGridCol {
        /**
          * The number of columns this column spans from the smallest breakpoint and above.
         */
        "colspan"?: string;
        /**
          * The number of columns this column spans from the large breakpoint and above.
         */
        "colspanLg"?: string;
        /**
          * The number of columns this column spans from the medium breakpoint and above.
         */
        "colspanMd"?: string;
        /**
          * The number of columns this column spans from the extra large breakpoint and above.
         */
        "colspanXl"?: string;
    }
    interface RdsHeader {
        /**
          * This property removes the mobile navigation bars from mobile when a navigation component doesn't exist.
         */
        "nav"?: boolean;
        /**
          * Event emitted when nav is closed by click
         */
        "onCloseNav"?: (event: RdsHeaderCustomEvent<any>) => void;
        /**
          * Event emitted when nav is opened by click
         */
        "onOpenNav"?: (event: RdsHeaderCustomEvent<any>) => void;
        "sidebar"?: string;
        /**
          * @deprecated Determines the header type. Options are: 'base' for latest, leave blank for default layout.
         */
        "type"?: string;
    }
    interface RdsHeadline {
        /**
          * The color of the headline.
         */
        "color"?: TailwindColors | 'green';
        /**
          * The heading level is set to determine the heading tag to be applied
         */
        "level"?: HeadlineLevel;
        /**
          * Spacing controls the top and bottom margin on the headline tags.
         */
        "spacing"?: Spacing;
        /**
          * The weight for the headline.
         */
        "weight"?: TextWeight;
    }
    interface RdsHeroIcon {
        /**
          * Set the background color of the icon.
         */
        "bg"?: HeroIconBackground;
        /**
          * Controls the text color.
         */
        "color"?: TailwindColors;
        /**
          * Set the name of the icon to implement.
         */
        "name"?: string;
        /**
          * Set the shape around the icon. This is important if using the `bg` prop.
         */
        "shape"?: HeroIconShape;
        /**
          * Set the size of the icon.  Values: md (16x16), lg (24x24), xl (32x32)
         */
        "size"?: HeroIconSize;
        /**
          * Set the type of the icon.
         */
        "type"?: HeroIconType;
    }
    interface RdsIcon {
        /**
          * @deprecated Set the alternative text of the icon
         */
        "alt"?: string;
        /**
          * @deprecated Sets the color of the icon. Setting no color will inherit from its parent.
         */
        "color"?: string;
        /**
          * @deprecated Set the name of the icon to implement
         */
        "icon"?: string;
        /**
          * @deprecated Set the size of the icon. Values: md (16x16), lg (24x24), xlg (32x32)
         */
        "size"?: string;
    }
    interface RdsImage {
        /**
          * Set the alternative text of the image
         */
        "alt"?: string;
        /**
          * Set the caption text that is displayed under the image
         */
        "caption"?: string;
        /**
          * Set the detail text that is displayed under the title text in a lightbox
         */
        "detail"?: string;
        /**
          * Set the title text that is displayed above image in a lightbox
         */
        "headline"?: string;
        /**
          * Set tabindex when inside a lightbox
         */
        "interactive"?: boolean;
        "onRdsImageSelect"?: (event: RdsImageCustomEvent<any>) => void;
        /**
          * Display headline next to image?
         */
        "showHeadline"?: boolean;
        /**
          * Size options for thumbnail: 'sm', 'md', 'lg' and 'full'
         */
        "size"?: string;
        /**
          * Set the source url of the image
         */
        "src"?: string;
        /**
          * Size options for small thumb, medium thumb, and large
         */
        "thumbnail"?: boolean;
    }
    interface RdsIndicator {
        /**
          * Color to set the indicator. Options are 'success' (green), 'warning' (yellow), 'alert' (red), 'primary' (purple), 'secondary' (blue), 'tertiary' (gray), 'primary-alt (purple-ring) and tertiary-alt (white).
         */
        "appearance"?: IndicatorAppearance;
    }
    interface RdsInput {
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete"?: AutocompleteTypes;
        "customValidator"?: Array<string | ValidatorEntry | Validator<string>>;
        /**
          * If `true`, input is set to disabled mode.
         */
        "disabled"?: boolean;
        /**
          * If `true`, input will be in error/invalid mode.
         */
        "error"?: boolean;
        /**
          * @deprecated If `true`, and slot contents are fulfilled, help text will appear below input component
         */
        "helptext"?: boolean;
        /**
          * @deprecated If `true`, icon will be displayed at the end of input component that will be on the right side
         */
        "iconend"?: boolean;
        /**
          * @deprecated If `true`, icon will be displayed on start of input component that will be on left side
         */
        "iconstart"?: boolean;
        /**
          * Whether or not the leading addon to your input is inline.
         */
        "inlineLeading"?: boolean;
        /**
          * Whether or not the leading addon to your input is inline.
         */
        "inlineTrailing"?: boolean;
        /**
          * Label to be displayed in relation to its `RdsInput` component
         */
        "label"?: string;
        /**
          * Defines maximum value allowed in number input and text input for min/max date..
         */
        "max"?: string;
        /**
          * Defines maximum number of character allowed.
         */
        "maxlength"?: number;
        /**
          * Defines minimum value allowed in number input and text input for min/max date.
         */
        "min"?: string;
        /**
          * Defines minimum number of character allowed.
         */
        "minlength"?: number;
        /**
          * The name attribute of the input element.
         */
        "name"?: string;
        /**
          * Fires each time a new value is typed.
         */
        "onRdsInputInput"?: (event: RdsInputCustomEvent<any>) => void;
        "onRdsInternalInputBlur"?: (event: RdsInputCustomEvent<any>) => void;
        /**
          * Emitted when the input loses focus.
         */
        "onRdsOnBlur"?: (event: RdsInputCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the input's value has changed.
         */
        "onRdsOnChange"?: (event: RdsInputCustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onRdsOnFocus"?: (event: RdsInputCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onRdsOnInput"?: (event: RdsInputCustomEvent<any>) => void;
        /**
          * Defines regex pattern that input's value must match.
         */
        "pattern"?: string;
        /**
          * Placeholder text to be displayed inside the `<input>` component
         */
        "placeholder"?: string | null;
        /**
          * If `true`, input is set to readonly mode.
         */
        "readonly"?: boolean;
        /**
          * Whether or not the input component is required.
         */
        "required"?: boolean;
        /**
          * Specifies the interval between legal numbers in number input and text input for min/max date.
         */
        "step"?: string;
        /**
          * The type attribute of the input element.
         */
        "type"?: InputType;
        /**
          * If `true`, the input will be validated against the constraint validators that are set.
         */
        "validate"?: boolean;
        /**
          * Defines the custom validation of the input. You must pass the array and object(s) as defined in the custom validation docs as a string so it can be parsed properly in all instances. Ex: '[{"name":"length", "options": {"min": 1, "max": 5}}]'
         */
        "validator"?: string;
        /**
          * The value of the input element.
         */
        "value"?: string | number | null;
    }
    interface RdsInputDatePicker {
        /**
          * Expand or collapse when calendar does not have input
         */
        "active"?: boolean;
        /**
          * Selected end date
         */
        "end"?: string;
        /**
          * @deprecated - Use valueByDate instead Selected end date as full date object
         */
        "endAsDate"?: Date;
        /**
          * Number at which section headings should start for this component.
         */
        "headingLevel"?: number;
        /**
          * Place the calendar icon in either leading or trailing position by setting the values as true/false respectively. Default value is true
         */
        "iconStart"?: boolean;
        /**
          * Localized string for "next month" (used for aria label)
          * @default "Next month"
         */
        "intlNextMonth"?: string;
        /**
          * Localized string for "previous month" (used for aria label)
          * @default "Previous month"
         */
        "intlPrevMonth"?: string;
        /**
          * Layout
         */
        "layout"?: 'horizontal' | 'vertical';
        /**
          * BCP 47 language tag for desired language and country format
         */
        "locale"?: string;
        /**
          * Latest allowed date ("yyyy-mm-dd")
         */
        "max"?: string;
        /**
          * Latest allowed date as full date object
         */
        "maxAsDate"?: Date;
        /**
          * Earliest allowed date ("yyyy-mm-dd")
         */
        "min"?: string;
        /**
          * Earliest allowed date as full date object
         */
        "minAsDate"?: Date;
        /**
          * Trigger rds date change when a user changes the date.
         */
        "onRdsDatePickerChange"?: (event: RdsInputDatePickerCustomEvent<Date>) => void;
        /**
          * Trigger rds date change when a user changes the date range.
          * @see [DateRangeChange](https://dev.azure.com/fmglobal/DCE/_git/rds-core?path=/rds-components/src/components/rds-form-elements/rds-date-picker/interfaces.ts#L100)
         */
        "onRdsDatePickerRangeChange"?: (event: RdsInputDatePickerCustomEvent<DateRangeChange>) => void;
        "onRdsInputDatePickerClose"?: (event: RdsInputDatePickerCustomEvent<any>) => void;
        "onRdsInputDatePickerOpen"?: (event: RdsInputDatePickerCustomEvent<any>) => void;
        /**
          * Describes the type of positioning to use for the overlaid content. If your element is in a fixed container, use the 'fixed' value.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Disables the default behaviour on the third click of narrowing or extending the range and instead starts a new range.
         */
        "proximitySelectionDisabled"?: boolean;
        /**
          * Range mode activation
         */
        "range"?: boolean;
        /**
          * Whether or not the date picker is required.
         */
        "required"?: boolean;
        /**
          * Selected start date
         */
        "start"?: string;
        /**
          * @deprecated - Use valueByDate instead Selected start date as full date object
         */
        "startAsDate"?: Date;
        /**
          * If `true`, the date picker will be validated against the constraint validators that are set.
         */
        "validate"?: boolean;
        /**
          * Selected date
         */
        "value"?: string | string[];
        /**
          * Selected date as full date object
         */
        "valueAsDate"?: Date | Date[];
    }
    interface RdsLabel {
        /**
          * If `true`, label is set to disabled mode. Set up to inherit from the parent `RdsInput` component.
         */
        "disabled"?: boolean;
        /**
          * What the label is for; connects label to corresponding form element
         */
        "for"?: string;
        /**
          * If `true`, input is set to readonly mode.    * Set up to inherit from the parent `RdsInput` component.
         */
        "readonly"?: boolean;
    }
    interface RdsLightbox {
        /**
          * The source url(s) of the image(s)
         */
        "src"?: Array<any>;
    }
    interface RdsLink {
        /**
          * The type of the link. Current options are: `"primary"`, `"secondary"`.
         */
        "appearance"?: string;
        /**
          * This property handles the disabled state of the link.
         */
        "disabled"?: boolean;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href"?: string | undefined;
        /**
          * Determines the padding on the link if an icon is the only contents.
         */
        "iconOnly"?: boolean;
        /**
          * Accessible label for link.
         */
        "label"?: string;
        /**
          * The link size. Options are: `"sm"` and `"base"`
         */
        "size"?: string;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target"?: string | undefined;
        /**
          * @deprecated You can now type within the link tags set the link text.
         */
        "text"?: string;
    }
    interface RdsList {
        /**
          * @deprecated Determines the visibility of a list.
         */
        "active"?: boolean;
        /**
          * If true, will place a horizontal border between description list items.
         */
        "divided"?: boolean;
        /**
          * Sets the width of the list item. If true, will not expand past its contents. If false, will reach full width possible.
         */
        "narrow"?: boolean;
        /**
          * If true, will zebra-stripe alternating description list items. List type must be `description` for this prop to take effect.
         */
        "striped"?: boolean;
        /**
          * Sets the type of the list.
         */
        "type"?: ListType;
    }
    interface RdsListItem {
        /**
          * @deprecated Determines the state of the list item for navigation purposes
         */
        "active"?: boolean;
        /**
          * If true, the list item will be split into two columns. This prop is created for description and stacked list items.
         */
        "columns"?: boolean;
        "divided"?: boolean;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href"?: string;
        /**
          * @deprecated Shows icon for main nav items only if true. If set to false, the chevron is hidden. Default This is useful for main nav items that don't have sub-nav items.
         */
        "icon"?: boolean;
        /**
          * @deprecated Event emitted nav item is clicked and needs to collapse Sub Nav
         */
        "onCloseSubNav"?: (event: RdsListItemCustomEvent<boolean>) => void;
        /**
          * @deprecated Event emitted nav item is clicked and needs to expand Sub Nav
         */
        "onOpenSubNav"?: (event: RdsListItemCustomEvent<boolean>) => void;
        /**
          * @deprecated Determines the state of the list item for navigation purposes
         */
        "spacingX"?: string;
        /**
          * @deprecated Determines the state of the list item for navigation purposes
         */
        "spacingY"?: string;
        "striped"?: boolean;
        /**
          * @deprecated Set the target of the link of the list item. Set to "_blank" to open link in a new window.
         */
        "target"?: string;
        /**
          * Sets the type of the list item.
         */
        "type"?: ListItemType;
    }
    interface RdsMenu {
        /**
          * Disables the automatic closing on menu item click.
         */
        "disableClose"?: boolean;
        /**
          * Sets the menu trigger to disabled
         */
        "disabled"?: boolean;
        /**
          * Sets the behavior of the menu trigger as hover instead of click.
         */
        "hover"?: boolean;
        /**
          * The open state of the menu.
         */
        "isOpen"?: boolean;
        /**
          * Offset the position of the popover away from the reference element.
         */
        "offsetDistance"?: number;
        /**
          * Offset the position of the popover along the reference element.
         */
        "offsetSkidding"?: number;
        /**
          * Fires when a menu item has been selected or deselected. *
         */
        "onRdsMenuSelect"?: (event: RdsMenuCustomEvent<any>) => void;
        /**
          * Describes the type of positioning to use for the overlaid content.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Sets the position of the menu.
         */
        "position"?: PopperPlacement;
        /**
          * Sets the scrolling of the panel on the menu.
         */
        "scrolling"?: boolean;
        /**
          * Toggles the dropshadow on the panel.
          * @deprecated
         */
        "shadow"?: boolean;
        /**
          * Sets the width of the panel.
          * @deprecated
         */
        "width"?: MenuWidth;
    }
    interface RdsMenuItem {
        /**
          * Set the disabled state of a menu item.
         */
        "disabled"?: boolean;
        /**
          * Adds a divider to a menu item.
         */
        "divider"?: boolean;
        "onRdsMenuItemSelect"?: (event: RdsMenuItemCustomEvent<any>) => void;
        /**
          * Event emitted from menuitem to bubble up to the menu component
         */
        "onSelectedEvent"?: (event: RdsMenuItemCustomEvent<boolean>) => void;
        /**
          * The value of the menu item.
         */
        "value"?: string;
    }
    interface RdsMeta {
        /**
          * The name of the icon to display. The value of this property must match the icon name from RDS Hero Icons
         */
        "icon"?: string;
    }
    interface RdsModal {
        /**
          * Optionally pass a function to run before close
         */
        "beforeClose"?: (el: HTMLElement) => Promise<void>;
        /**
          * Hides the close button in the top right of the modal to focus user to the action buttons.
         */
        "closeButton"?: boolean;
        /**
          * Used to disable the default close on escape press.
         */
        "disableEscape"?: boolean;
        /**
          * Disables the closing of the Modal when clicking the overlay.
         */
        "disableOverlayClose"?: boolean;
        /**
          * If true, the modal is in fullscreen mode.
         */
        "fullScreen"?: boolean;
        /**
          * The text displayed as the headline of the modal. You can optionally pass in HTML for headline by using the headline slot.
         */
        "headline"?: string;
        /**
          * Accessible label for Modal to use in the aria-label.
         */
        "label"?: string;
        /**
          * Event emitted when modal is closed.
         */
        "onModalClosed"?: (event: RdsModalCustomEvent<any>) => void;
        /**
          * Event emitted when modal is opened.
         */
        "onModalOpened"?: (event: RdsModalCustomEvent<any>) => void;
        /**
          * This sets the visiblity of the modal.
         */
        "visible"?: boolean;
    }
    interface RdsNav {
        /**
          * When set to true, the user can toggle the state of the navigation component.
         */
        "collapsible"?: boolean;
        /**
          * Indicates whether nav is expanded. If false, the nav is collapsed. Note: For 'base' nav only.
         */
        "expanded"?: boolean;
        /**
          * This is for an accessible label on the nav element. Please omit the use of the term "navigation".
         */
        "label"?: string;
        /**
          * Event emitted when nav is closed by click
         */
        "onBackdropCloseNav"?: (event: RdsNavCustomEvent<any>) => void;
        /**
          * Emitted when expanded has been toggled.
         */
        "onRdsNavToggle"?: (event: RdsNavCustomEvent<any>) => void;
        /**
          * @deprecated Determines the layout based on the journey. Options are: 'base' for latest, leave blank for Phase 1 layout.
         */
        "type"?: string;
    }
    interface RdsNavItem {
        /**
          * To show a nav item in an active state, this can be set to true.
         */
        "active"?: boolean;
        /**
          * If `true`, nav item is a child of another nav item.
         */
        "child"?: boolean;
        /**
          * If `true`, nav item will expand/collapse with the nav container. Set up to inherit from the parent `RdsNav` component.
         */
        "collapsible"?: boolean;
        /**
          * If `true`, nav item will expand/collapse with the nav container. Set up to inherit from the parent `RdsNav` component.
         */
        "expanded"?: boolean;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href"?: string;
        /**
          * If `true`, nav item is open and its slotted children are revealed.
         */
        "open"?: boolean;
        /**
          * Set the target of the link of the list item. Set to "_blank" to open link in a new window.
         */
        "target"?: string;
    }
    interface RdsPageHeading {
        /**
          * Text that is displayed as the page heading.
         */
        "text"?: string;
    }
    interface RdsPagination {
        /**
          * number of items per page
         */
        "items"?: number;
        /**
          * Emitted whenever the selected page changes.
         */
        "onRdsPaginationChange"?: (event: RdsPaginationCustomEvent<RdsPaginationDetail>) => void;
        /**
          * Emitted whenever the selected page changes.
         */
        "onRdsPaginationUpdate"?: (event: RdsPaginationCustomEvent<RdsPaginationDetail>) => void;
        /**
          * index of item that should begin the page
         */
        "start"?: number;
        /**
          * total number of items
         */
        "total"?: number;
    }
    interface RdsPanel {
        /**
          * If `true`, the panel will display a close button in the top right corner.
         */
        "closeButton"?: boolean;
        /**
          * If `true`, a fixed panel will disable the body scrollbar when open.
         */
        "disableBodyScroll"?: boolean;
        /**
          * If `true`, the panel is disabled.
         */
        "disabled"?: boolean;
        /**
          * Sets the panel's headline level.
         */
        "level"?: HeadlineLevel;
        /**
          * Removes padding inside the panel.
         */
        "noPadding"?: boolean;
        /**
          * Emitted when the panel is closed.
         */
        "onRdsDidClose"?: (event: RdsPanelCustomEvent<void>) => void;
        /**
          * Emitted when the panel is open.
         */
        "onRdsDidOpen"?: (event: RdsPanelCustomEvent<void>) => void;
        /**
          * Emitted when the panel state is changed.
         */
        "onRdsPanelChange"?: (event: RdsPanelCustomEvent<PanelChangeEventDetail>) => void;
        /**
          * Emitted when the panel is about to be closed.
         */
        "onRdsWillClose"?: (event: RdsPanelCustomEvent<void>) => void;
        /**
          * Emitted when the panel is about to be opened.
         */
        "onRdsWillOpen"?: (event: RdsPanelCustomEvent<void>) => void;
        /**
          * Sets the ID of the panel.
         */
        "panelId"?: string;
        /**
          * Sets the panel's title.
         */
        "panelTitle"?: string;
        /**
          * When position is set to fixed, the panel will overlay content. Set position to 'push' to set display to inline-block;
         */
        "position"?: PanelPosition;
        /**
          * If `true`, the panel to span 1/2 width of screen.
         */
        "wide"?: boolean;
    }
    interface RdsPanelToggle {
        /**
          * Automatically hides the content when the corresponding panel is not active.  By default, it's `true`. Change it to `false` in order to keep `rds-panel-toggle` always visible regardless the state of the panel.
         */
        "autoHide"?: boolean;
        /**
          * Optional property that maps to a Panel's `panelId` prop. Can also be `start` or `end` for the panel side. This is used to find the correct panel to toggle.  If this property is not used, `rds-panel-toggle` will toggle the first panel that is active.
         */
        "panel"?: string;
    }
    interface RdsPill {
    }
    interface RdsProfile {
    }
    interface RdsProgressBar {
        /**
          * Sets the label for the progress bar.
         */
        "label"?: string;
        /**
          * The maximum value of the component. The progress prop cannot exceed this.
         */
        "maximumValue"?: number;
        /**
          * The initial progress value.
         */
        "value"?: number;
    }
    interface RdsProgressCircle {
        /**
          * Sets the label for the progress circle.
         */
        "label"?: string;
        /**
          * Set the size of the progress circle, default is md. Available Options are: sm, md and lg
         */
        "size"?: string;
        /**
          * Sets the percentage value to be displayed as well as the amount of the circle to be filled.
         */
        "value"?: string;
    }
    interface RdsRadioButton {
        /**
          * This property directly maps to the checked attribute on the native input.
         */
        "checked"?: boolean;
        /**
          * This property directly maps to the disabled attribute of the native input.
         */
        "disabled"?: boolean;
        /**
          * If `true`, radio will be in error/invalid mode.
         */
        "error"?: boolean;
        /**
          * The focused state of the radio button.
          * @private
         */
        "focused"?: boolean;
        /**
          * If `true`, radio is inside a radio-button-group component.
         */
        "group"?: boolean;
        /**
          * The id attribute of the radio button.  When omitted, a globally unique identifier is used.
         */
        "guid"?: string;
        /**
          * An accessible label to be given to the input.
         */
        "label"?: string;
        /**
          * This property maps to the name attribute of the native input to ensure a single value to be selected with the same name.
         */
        "name"?: string;
        /**
          * Emitted when the radio button loses focus.
         */
        "onRdsOnBlur"?: (event: RdsRadioButtonCustomEvent<void>) => void;
        /**
          * Emitted when the radio button has focus.
         */
        "onRdsOnFocus"?: (event: RdsRadioButtonCustomEvent<void>) => void;
        /**
          * Fires only when the radio button is checked.
         */
        "onRdsRadioButtonChange"?: (event: RdsRadioButtonCustomEvent<any>) => void;
        /**
          * Whether or not the radio is required.
         */
        "required"?: boolean;
        /**
          * Set the appearance type of the radio.
         */
        "type"?: RadioType;
        /**
          * If `true`, the radio will be validated against the constraint validators that are set.
         */
        "validate"?: boolean;
        /**
          * The value of the radio element
         */
        "value": any;
    }
    interface RdsRadioButtonGroup {
        /**
          * Sets the direction of the individual radio buttons
         */
        "direction"?: RadioGroupDirection;
        /**
          * Sets the disabled property of all slotted radio buttons
         */
        "disabled"?: boolean;
        /**
          * Sets the label for the entire radio button group
         */
        "label"?: string;
        /**
          * Sets the name property of all slotted radio buttons
         */
        "name"?: string;
        /**
          * Sets the required property of all slotted checkboxes
         */
        "required"?: boolean;
        /**
          * Sets the type property of all slotted radio buttons
         */
        "type"?: RadioType;
        /**
          * If `true`, the radio button group will be validated against the constraint validators that are set.
         */
        "validate"?: boolean;
    }
    interface RdsSearch {
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete"?: AutocompleteTypes;
        /**
          * Set the amount of time, in milliseconds, to wait to trigger the `rdsChange` event after each keystroke.
         */
        "debounce"?: number;
        /**
          * If `true`, the user cannot interact with the input.
         */
        "disabled"?: boolean;
        /**
          * Emitted when the input loses focus.
         */
        "onRdsBlur"?: (event: RdsSearchCustomEvent<void>) => void;
        /**
          * Emitted when the cancel button is clicked.
         */
        "onRdsCancel"?: (event: RdsSearchCustomEvent<void>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onRdsChange"?: (event: RdsSearchCustomEvent<SearchChangeEventDetail>) => void;
        /**
          * Emitted when the clear input button is clicked.
         */
        "onRdsClear"?: (event: RdsSearchCustomEvent<void>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onRdsFocus"?: (event: RdsSearchCustomEvent<void>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onRdsInput"?: (event: RdsSearchCustomEvent<KeyboardEvent>) => void;
        /**
          * Sets the input's placeholder text.
         */
        "placeholder"?: string;
        /**
          * The value of the search input.
         */
        "value"?: string | null;
    }
    interface RdsSectionHeading {
        /**
          * Sets the section's headline level.
         */
        "level"?: HeadlineLevel;
        /**
          * Text that is displayed as the page heading.
         */
        "text"?: string;
    }
    interface RdsSelect {
        /**
          * Indicates whether the value of the control can be automatically completed by the browser.
         */
        "autocomplete"?: AutocompleteTypes;
        "customSelected"?: any;
        /**
          * If `true`, select is set to disabled mode.
         */
        "disabled"?: boolean;
        /**
          * If `true`, select will be in error/invalid mode.
         */
        "error"?: boolean;
        /**
          * @deprecated If `true`, and slot contents are fulfilled, help text will appear below select component.
         */
        "helptext"?: boolean;
        /**
          * Label to be displayed in relation to its `RdsSelect` component.
         */
        "label"?: string;
        /**
          * if `true` multi-select mode will be enabled.
         */
        "multiple"?: boolean;
        /**
          * The name attribute of the select element.
         */
        "name"?: string;
        /**
          * If `true` select is using native HTML for select. Otherwise, will be a custom element.
         */
        "native"?: boolean;
        /**
          * Emitted when the select loses focus.
         */
        "onRdsOnBlur"?: (event: RdsSelectCustomEvent<void>) => void;
        /**
          * Emitted when the selects's value has changed.
         */
        "onRdsOnChange"?: (event: RdsSelectCustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the select has focus.
         */
        "onRdsOnFocus"?: (event: RdsSelectCustomEvent<void>) => void;
        /**
          * Whether or not the select component is required.
         */
        "required"?: boolean;
        /**
          * If `true`, the select will be validated against the constraint validators that are set.
         */
        "validate"?: boolean;
        /**
          * @deprecated The width of the select component.
         */
        "width"?: string;
    }
    interface RdsSkeleton {
        /**
          * Number of rows of current skeleton type
         */
        "count"?: number;
        /**
          * Height of the skeleton. Include px like '100px'.
         */
        "height"?: string;
        /**
          * Optional bottom margin of the skeleton ex. 10px, 0 etc.
         */
        "marginBottom"?: string;
        /**
          * Variant of the skeleton 'circle' | 'rect' | 'text'
         */
        "variant"?: string;
        /**
          * Width of the skeleton. Include px like '100px'.
         */
        "width"?: string;
    }
    interface RdsSnackbar {
        /**
          * The appearance of the Snackbar. Options are: `"info"`, `"error"`, and `"success"`.
         */
        "appearance"?: SnackbarAppearance;
        /**
          * If set to `false`, the snackbar will not hide unless dismissed by the user
         */
        "autoHide"?: boolean;
        /**
          * When autoHide is true, this determines the length of time (in milliseconds) the snackbar is displayed.
         */
        "autoHideDuration"?: number;
        "onAutoclose"?: (event: RdsSnackbarCustomEvent<any>) => void;
        /**
          * The appearance of the Snackbar. Options are: `"info"`, `"error"`, and `"success"`.
          * @deprecated - please use 'appearance' prop instead.
         */
        "severity"?: SnackbarAppearance;
        /**
          * If set to `false`, the snackbar will be hidden.
         */
        "visible"?: boolean;
    }
    interface RdsSpinner {
        /**
          * Set the size of the spinner.  Default: md (48x48)  Values: sm (32x32), md (48x48), lg (64x64), xl (80x80)
         */
        "size"?: SizesAll;
    }
    interface RdsStepper {
        /**
          * This event fires when the active stepper item has changed.
         */
        "onRdsStepperItemChange"?: (event: RdsStepperCustomEvent<any>) => void;
        "requestedContent"?: HTMLElement[] | NodeListOf<any>;
        /**
          * Sets the type of the stepper.
         */
        "type"?: StepperType;
        /**
          * For complex, bullet, and circle steppers. If true, will display stepper vertically and with the stepper item text.
         */
        "vertical"?: boolean;
    }
    interface RdsStepperItem {
        /**
          * If `true`, the step is active.
         */
        "active"?: boolean;
        /**
          * If `true`, the step been completed.
         */
        "complete"?: boolean;
        /**
          * @deprecated Sets a complex stepper item's description text. Note: This will only apply to stepper's with `type='complex'`
         */
        "description"?: string;
        /**
          * Determines if this stepper item is disabled and not engageable by the user.
         */
        "disabled"?: boolean;
        /**
          * Pass the name of the hero icon you'd like displayed. Note: This will only apply to stepper's with the default `type` of _simple_.
         */
        "icon"?: string;
        /**
          * Sets the simple stepper's headline level.
         */
        "level"?: HeadlineLevel;
        "onRdsStepperItemRegister"?: (event: RdsStepperItemCustomEvent<any>) => void;
        /**
          * Event is emitted when a stepper item is selected.
         */
        "onRdsStepperItemSelect"?: (event: RdsStepperItemCustomEvent<any>) => void;
        /**
          * Sets the stepper item's title text.
         */
        "text"?: string;
        /**
          * Sets the type of stepper item to display.
         */
        "type"?: StepperType;
        /**
          * For complex, circle, and bullet steppers only. If true, will display stepper vertically and with the stepper item text.
         */
        "vertical"?: boolean;
    }
    interface RdsSubLabel {
        /**
          * Sets up the input id if the string is passed.
         */
        "for"?: string;
        "groupChecked"?: boolean;
        /**
          * If type is 'headline', the sub-label's color will be gray-500.
         */
        "type"?: SubLabelType;
    }
    interface RdsTab {
        /**
          * If `true`, the tab appears in an active state.
         */
        "active"?: boolean;
        /**
          * Sets the appearance type of the individual tab. Set up to inherit from the parent `RdsTabs` component.
         */
        "appearance"?: Appearance;
        /**
          * If `true`, the user cannot interact with the tab.
         */
        "disabled"?: boolean;
        /**
          * Contains a URL or a URL fragment that the hyperlink points to. If this property is set, an anchor tag will be rendered.
         */
        "href"?: string | undefined;
        /**
          * Emitted when the tab button is clicked
         */
        "onRdsTabButtonClick"?: (event: RdsTabCustomEvent<TabClickEventDetail>) => void;
        /**
          * The selected tab component
          * @deprecated
         */
        "selected"?: boolean;
        /**
          * A tab id must be provided for each `rds-tab`. It's used internally to reference the selected tab to switch between them.
         */
        "tab": string;
        /**
          * Specifies where to display the linked URL. Only applies when an `href` is provided. Special keywords: `"_blank"`, `"_self"`, `"_parent"`, `"_top"`.
         */
        "target"?: string | undefined;
        /**
          * A value for the mobile selected tab.
         */
        "value": string;
    }
    interface RdsTable {
        /**
          * Sets caption text for table component. This is for accessibility purposes. Text is visually hidden but accessible to screen readers.
         */
        "caption"?: string;
        /**
          * Sets the table cell's padding to 'compact' mode.
         */
        "compact"?: boolean;
        /**
          * Sets the table row's to 'group' mode.
         */
        "groupedRows"?: boolean;
        /**
          * Sets the table top column to 'stacked' mode and turn into a card view on mobile.
         */
        "mobileStacked"?: boolean;
        /**
          * Sets the table row's background color to 'striped' mode.
         */
        "striped"?: boolean;
        /**
          * Adds `vertical lines` between table columns.
         */
        "verticalLines"?: boolean;
    }
    interface RdsTableCell {
        /**
          * Text alignment for the cell. Options are: `"left"` (default), `"center"` and `"right"`.
         */
        "align"?: string;
        "compact"?: boolean;
        /**
          * Hides the column in mobile view when sets to true and cell prop type is head.
         */
        "mobileHide"?: boolean;
        "mobileStacked"?: boolean;
        /**
          * Type of the cell. Options are: `"data"` (default) and `"head"`.
         */
        "type"?: string;
        "verticalLines"?: boolean;
        /**
          * If visible is set to `"true"` columns will stack in mobile view .
         */
        "visible"?: boolean;
    }
    interface RdsTableRow {
        /**
          * If group is set to `"true"` cell will take its own full space to cover all the table row.
         */
        "group"?: boolean;
        "groupedRows"?: boolean;
        "striped"?: boolean;
    }
    interface RdsTabs {
        /**
          * Sets the appearance type of the tabs container
         */
        "appearance"?: TabAppearance;
        /**
          * An accessible label of the tab section.
         */
        "label"?: string;
        /**
          * Emitted when the navigation has finished transitioning to a new component.
         */
        "onRdsTabsDidChange"?: (event: RdsTabsCustomEvent<{ tab: string }>) => void;
        /**
          * Emitted when the navigation is about to transition to a new component.
         */
        "onRdsTabsWillChange"?: (event: RdsTabsCustomEvent<{ tab: string }>) => void;
    }
    interface RdsText {
        /**
          * The alignment of the text. Reflects as a text-align CSS property.
         */
        "align"?: TextAlign;
        /**
          * Controls the text color.
         */
        "color"?: TailwindColors;
        /**
          * The size of the text. Reflects as a font-size CSS property.
         */
        "size"?: TextSize;
        /**
          * The spacing of the text. Spacing controls the top and bottom margin on the headline tags.
         */
        "spacing"?: Spacing;
        /**
          * The tag type of the text. `inline` returns a span tag. `p` renders a p tag.
         */
        "type"?: TextType;
        /**
          * The weight for the text.
         */
        "weight"?: TextWeight;
    }
    interface RdsTextarea {
        /**
          * @deprecated Specifies the visible number of cols in a text area
         */
        "cols"?: number;
        /**
          * If `true`, textarea is set to disabled mode.
         */
        "disabled"?: boolean;
        /**
          * If `true`, textarea will be in error/invalid mode.
         */
        "error"?: boolean;
        /**
          * @deprecated If `true`, and slot contents are fulfilled, help text will appear below input component
         */
        "helptext"?: boolean;
        /**
          * Label to be displayed in relation to its `RdsTextarea` component
         */
        "label"?: string;
        /**
          * Defines maximum number of character allowed.
         */
        "maxlength"?: number;
        /**
          * Defines minimum number of character allowed.
         */
        "minlength"?: number;
        /**
          * The name attribute of the textarea element.
         */
        "name"?: string;
        /**
          * Emitted when the input loses focus.
         */
        "onRdsOnBlur"?: (event: RdsTextareaCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the value has changed.
         */
        "onRdsOnChange"?: (event: RdsTextareaCustomEvent<InputChangeEventDetail>) => void;
        /**
          * Emitted when the input has focus.
         */
        "onRdsOnFocus"?: (event: RdsTextareaCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when a keyboard input occurred.
         */
        "onRdsOnInput"?: (event: RdsTextareaCustomEvent<KeyboardEvent>) => void;
        /**
          * Placeholder text to be displayed inside the `<textarea>` component
         */
        "placeholder"?: string | null;
        /**
          * If `true`, textarea is set to readonly mode.
         */
        "readonly"?: boolean;
        /**
          * Whether or not the textarea component is required.
         */
        "required"?: boolean;
        /**
          * Whether resize is to be enabled on the textarea component.
         */
        "resize"?: TextareaResize;
        /**
          * @deprecated Specifies the visible number of lines in a text area
         */
        "rows"?: number;
        "triggerFocusEvents"?: boolean;
        /**
          * If `true`, the textarea will be validated against the constraint validators that are set.
         */
        "validate"?: boolean;
        /**
          * The value of the textarea element
         */
        "value"?: string | null;
    }
    interface RdsToggle {
        /**
          * When true, the user cannot engage with the toggle
         */
        "disabled"?: boolean;
        /**
          * Label to be displayed next to RdsToggle
         */
        "label"?: string;
        /**
          * The name of the input for the toggle
         */
        "name"?: string;
        /**
          * Fires when the switched value has changed.
         */
        "onRdsSwitchChange"?: (event: RdsToggleCustomEvent<any>) => void;
        /**
          * When true, the toggle will display as switched.
         */
        "switched"?: boolean;
        /**
          * The value of the input for the toggle
         */
        "value"?: any;
    }
    interface RdsTooltip {
        /**
          * Accessible name for the component
         */
        "label": string;
        /**
          * Offset the position of the popover away from the reference element.
          * @default 6
         */
        "offsetDistance"?: number;
        /**
          * Offset the position of the popover along the reference element.
         */
        "offsetSkidding"?: number;
        /**
          * Emitted when the Tooltip loses focus.
         */
        "onRdsTooltipOnBlur"?: (event: RdsTooltipCustomEvent<FocusEvent>) => void;
        /**
          * Emitted when the Tooltip has focus.
         */
        "onRdsTooltipOnFocus"?: (event: RdsTooltipCustomEvent<FocusEvent>) => void;
        /**
          * Display and position the component.
         */
        "open"?: boolean;
        /**
          * Describes the type of positioning to use for the overlaid content. If your element is in a fixed container, use the 'fixed' value.
         */
        "overlayPositioning"?: OverlayPositioning;
        /**
          * Determines where the component will be positioned relative to the referenceElement.
         */
        "position"?: PopperPlacement;
        /**
          * Reference HTMLElement used to position this component according to the placement property. As a convenience, a string ID of the reference element can be used. However, setting this property to use an HTMLElement is preferred so that the component does not need to query the DOM for the referenceElement.
         */
        "referenceElement"?: HTMLElement | string;
        /**
          * Size sets the max-width of the tooltip container. The available options are sm, md and lg.
          * @deprecated
         */
        "size"?: TooltipSize;
        /**
          * Tooltip Text. Text can be displayed by simply placing the text inside of the Tooltip.
          * @deprecated
         */
        "text"?: string;
    }
    interface RdsTooltipManager {
        "focused"?: boolean;
        /**
          * CSS Selector to match reference elements for tooltips. Reference elements will be identified by this selector in order to open their associated tooltip.
          * @default `[data-rds-tooltip-reference]`
         */
        "selector"?: string;
    }
    interface RdsWorkflowFooter {
        /**
          * If `true`, workflow footer will be fixed to the bottom of the user's screen.
         */
        "sticky"?: boolean;
    }
    interface RdsWorkflowHeader {
    }
    interface IntrinsicElements {
        "rds-accordion": RdsAccordion;
        "rds-accordion-item": RdsAccordionItem;
        "rds-action": RdsAction;
        "rds-action-bar": RdsActionBar;
        "rds-alert": RdsAlert;
        "rds-app-layout": RdsAppLayout;
        "rds-avatar": RdsAvatar;
        "rds-badge": RdsBadge;
        "rds-banner": RdsBanner;
        "rds-box": RdsBox;
        "rds-breadcrumb": RdsBreadcrumb;
        "rds-breadcrumbs": RdsBreadcrumbs;
        "rds-button": RdsButton;
        "rds-button-group": RdsButtonGroup;
        "rds-card-body": RdsCardBody;
        "rds-card-container": RdsCardContainer;
        "rds-card-footer": RdsCardFooter;
        "rds-card-header": RdsCardHeader;
        "rds-card-locations": RdsCardLocations;
        "rds-card-media": RdsCardMedia;
        "rds-card-title": RdsCardTitle;
        "rds-checkbox": RdsCheckbox;
        "rds-checkbox-group": RdsCheckboxGroup;
        "rds-chip": RdsChip;
        "rds-combobox": RdsCombobox;
        "rds-combobox-item": RdsComboboxItem;
        "rds-contact": RdsContact;
        "rds-date-picker": RdsDatePicker;
        "rds-date-picker-day": RdsDatePickerDay;
        "rds-date-picker-month": RdsDatePickerMonth;
        "rds-date-picker-month-header": RdsDatePickerMonthHeader;
        "rds-divider": RdsDivider;
        "rds-error-page": RdsErrorPage;
        "rds-fab": RdsFab;
        "rds-file-list": RdsFileList;
        "rds-file-uploader": RdsFileUploader;
        "rds-file-uploader-file": RdsFileUploaderFile;
        "rds-file-uploader-progress": RdsFileUploaderProgress;
        "rds-filter": RdsFilter;
        "rds-flex": RdsFlex;
        "rds-flex-item": RdsFlexItem;
        "rds-footer": RdsFooter;
        "rds-grid": RdsGrid;
        "rds-grid-col": RdsGridCol;
        "rds-header": RdsHeader;
        "rds-headline": RdsHeadline;
        "rds-hero-icon": RdsHeroIcon;
        "rds-icon": RdsIcon;
        "rds-image": RdsImage;
        "rds-indicator": RdsIndicator;
        "rds-input": RdsInput;
        "rds-input-date-picker": RdsInputDatePicker;
        "rds-label": RdsLabel;
        "rds-lightbox": RdsLightbox;
        "rds-link": RdsLink;
        "rds-list": RdsList;
        "rds-list-item": RdsListItem;
        "rds-menu": RdsMenu;
        "rds-menu-item": RdsMenuItem;
        "rds-meta": RdsMeta;
        "rds-modal": RdsModal;
        "rds-nav": RdsNav;
        "rds-nav-item": RdsNavItem;
        "rds-page-heading": RdsPageHeading;
        "rds-pagination": RdsPagination;
        "rds-panel": RdsPanel;
        "rds-panel-toggle": RdsPanelToggle;
        "rds-pill": RdsPill;
        "rds-profile": RdsProfile;
        "rds-progress-bar": RdsProgressBar;
        "rds-progress-circle": RdsProgressCircle;
        "rds-radio-button": RdsRadioButton;
        "rds-radio-button-group": RdsRadioButtonGroup;
        "rds-search": RdsSearch;
        "rds-section-heading": RdsSectionHeading;
        "rds-select": RdsSelect;
        "rds-skeleton": RdsSkeleton;
        "rds-snackbar": RdsSnackbar;
        "rds-spinner": RdsSpinner;
        "rds-stepper": RdsStepper;
        "rds-stepper-item": RdsStepperItem;
        "rds-sub-label": RdsSubLabel;
        "rds-tab": RdsTab;
        "rds-table": RdsTable;
        "rds-table-cell": RdsTableCell;
        "rds-table-row": RdsTableRow;
        "rds-tabs": RdsTabs;
        "rds-text": RdsText;
        "rds-textarea": RdsTextarea;
        "rds-toggle": RdsToggle;
        "rds-tooltip": RdsTooltip;
        "rds-tooltip-manager": RdsTooltipManager;
        "rds-workflow-footer": RdsWorkflowFooter;
        "rds-workflow-header": RdsWorkflowHeader;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "rds-accordion": LocalJSX.RdsAccordion & JSXBase.HTMLAttributes<HTMLRdsAccordionElement>;
            "rds-accordion-item": LocalJSX.RdsAccordionItem & JSXBase.HTMLAttributes<HTMLRdsAccordionItemElement>;
            "rds-action": LocalJSX.RdsAction & JSXBase.HTMLAttributes<HTMLRdsActionElement>;
            "rds-action-bar": LocalJSX.RdsActionBar & JSXBase.HTMLAttributes<HTMLRdsActionBarElement>;
            "rds-alert": LocalJSX.RdsAlert & JSXBase.HTMLAttributes<HTMLRdsAlertElement>;
            "rds-app-layout": LocalJSX.RdsAppLayout & JSXBase.HTMLAttributes<HTMLRdsAppLayoutElement>;
            "rds-avatar": LocalJSX.RdsAvatar & JSXBase.HTMLAttributes<HTMLRdsAvatarElement>;
            "rds-badge": LocalJSX.RdsBadge & JSXBase.HTMLAttributes<HTMLRdsBadgeElement>;
            "rds-banner": LocalJSX.RdsBanner & JSXBase.HTMLAttributes<HTMLRdsBannerElement>;
            "rds-box": LocalJSX.RdsBox & JSXBase.HTMLAttributes<HTMLRdsBoxElement>;
            "rds-breadcrumb": LocalJSX.RdsBreadcrumb & JSXBase.HTMLAttributes<HTMLRdsBreadcrumbElement>;
            "rds-breadcrumbs": LocalJSX.RdsBreadcrumbs & JSXBase.HTMLAttributes<HTMLRdsBreadcrumbsElement>;
            "rds-button": LocalJSX.RdsButton & JSXBase.HTMLAttributes<HTMLRdsButtonElement>;
            "rds-button-group": LocalJSX.RdsButtonGroup & JSXBase.HTMLAttributes<HTMLRdsButtonGroupElement>;
            "rds-card-body": LocalJSX.RdsCardBody & JSXBase.HTMLAttributes<HTMLRdsCardBodyElement>;
            "rds-card-container": LocalJSX.RdsCardContainer & JSXBase.HTMLAttributes<HTMLRdsCardContainerElement>;
            "rds-card-footer": LocalJSX.RdsCardFooter & JSXBase.HTMLAttributes<HTMLRdsCardFooterElement>;
            "rds-card-header": LocalJSX.RdsCardHeader & JSXBase.HTMLAttributes<HTMLRdsCardHeaderElement>;
            "rds-card-locations": LocalJSX.RdsCardLocations & JSXBase.HTMLAttributes<HTMLRdsCardLocationsElement>;
            "rds-card-media": LocalJSX.RdsCardMedia & JSXBase.HTMLAttributes<HTMLRdsCardMediaElement>;
            "rds-card-title": LocalJSX.RdsCardTitle & JSXBase.HTMLAttributes<HTMLRdsCardTitleElement>;
            "rds-checkbox": LocalJSX.RdsCheckbox & JSXBase.HTMLAttributes<HTMLRdsCheckboxElement>;
            "rds-checkbox-group": LocalJSX.RdsCheckboxGroup & JSXBase.HTMLAttributes<HTMLRdsCheckboxGroupElement>;
            "rds-chip": LocalJSX.RdsChip & JSXBase.HTMLAttributes<HTMLRdsChipElement>;
            "rds-combobox": LocalJSX.RdsCombobox & JSXBase.HTMLAttributes<HTMLRdsComboboxElement>;
            "rds-combobox-item": LocalJSX.RdsComboboxItem & JSXBase.HTMLAttributes<HTMLRdsComboboxItemElement>;
            "rds-contact": LocalJSX.RdsContact & JSXBase.HTMLAttributes<HTMLRdsContactElement>;
            "rds-date-picker": LocalJSX.RdsDatePicker & JSXBase.HTMLAttributes<HTMLRdsDatePickerElement>;
            "rds-date-picker-day": LocalJSX.RdsDatePickerDay & JSXBase.HTMLAttributes<HTMLRdsDatePickerDayElement>;
            "rds-date-picker-month": LocalJSX.RdsDatePickerMonth & JSXBase.HTMLAttributes<HTMLRdsDatePickerMonthElement>;
            "rds-date-picker-month-header": LocalJSX.RdsDatePickerMonthHeader & JSXBase.HTMLAttributes<HTMLRdsDatePickerMonthHeaderElement>;
            "rds-divider": LocalJSX.RdsDivider & JSXBase.HTMLAttributes<HTMLRdsDividerElement>;
            "rds-error-page": LocalJSX.RdsErrorPage & JSXBase.HTMLAttributes<HTMLRdsErrorPageElement>;
            "rds-fab": LocalJSX.RdsFab & JSXBase.HTMLAttributes<HTMLRdsFabElement>;
            "rds-file-list": LocalJSX.RdsFileList & JSXBase.HTMLAttributes<HTMLRdsFileListElement>;
            "rds-file-uploader": LocalJSX.RdsFileUploader & JSXBase.HTMLAttributes<HTMLRdsFileUploaderElement>;
            "rds-file-uploader-file": LocalJSX.RdsFileUploaderFile & JSXBase.HTMLAttributes<HTMLRdsFileUploaderFileElement>;
            "rds-file-uploader-progress": LocalJSX.RdsFileUploaderProgress & JSXBase.HTMLAttributes<HTMLRdsFileUploaderProgressElement>;
            "rds-filter": LocalJSX.RdsFilter & JSXBase.HTMLAttributes<HTMLRdsFilterElement>;
            "rds-flex": LocalJSX.RdsFlex & JSXBase.HTMLAttributes<HTMLRdsFlexElement>;
            "rds-flex-item": LocalJSX.RdsFlexItem & JSXBase.HTMLAttributes<HTMLRdsFlexItemElement>;
            "rds-footer": LocalJSX.RdsFooter & JSXBase.HTMLAttributes<HTMLRdsFooterElement>;
            "rds-grid": LocalJSX.RdsGrid & JSXBase.HTMLAttributes<HTMLRdsGridElement>;
            "rds-grid-col": LocalJSX.RdsGridCol & JSXBase.HTMLAttributes<HTMLRdsGridColElement>;
            "rds-header": LocalJSX.RdsHeader & JSXBase.HTMLAttributes<HTMLRdsHeaderElement>;
            "rds-headline": LocalJSX.RdsHeadline & JSXBase.HTMLAttributes<HTMLRdsHeadlineElement>;
            "rds-hero-icon": LocalJSX.RdsHeroIcon & JSXBase.HTMLAttributes<HTMLRdsHeroIconElement>;
            "rds-icon": LocalJSX.RdsIcon & JSXBase.HTMLAttributes<HTMLRdsIconElement>;
            "rds-image": LocalJSX.RdsImage & JSXBase.HTMLAttributes<HTMLRdsImageElement>;
            "rds-indicator": LocalJSX.RdsIndicator & JSXBase.HTMLAttributes<HTMLRdsIndicatorElement>;
            "rds-input": LocalJSX.RdsInput & JSXBase.HTMLAttributes<HTMLRdsInputElement>;
            "rds-input-date-picker": LocalJSX.RdsInputDatePicker & JSXBase.HTMLAttributes<HTMLRdsInputDatePickerElement>;
            "rds-label": LocalJSX.RdsLabel & JSXBase.HTMLAttributes<HTMLRdsLabelElement>;
            "rds-lightbox": LocalJSX.RdsLightbox & JSXBase.HTMLAttributes<HTMLRdsLightboxElement>;
            "rds-link": LocalJSX.RdsLink & JSXBase.HTMLAttributes<HTMLRdsLinkElement>;
            "rds-list": LocalJSX.RdsList & JSXBase.HTMLAttributes<HTMLRdsListElement>;
            "rds-list-item": LocalJSX.RdsListItem & JSXBase.HTMLAttributes<HTMLRdsListItemElement>;
            "rds-menu": LocalJSX.RdsMenu & JSXBase.HTMLAttributes<HTMLRdsMenuElement>;
            "rds-menu-item": LocalJSX.RdsMenuItem & JSXBase.HTMLAttributes<HTMLRdsMenuItemElement>;
            "rds-meta": LocalJSX.RdsMeta & JSXBase.HTMLAttributes<HTMLRdsMetaElement>;
            "rds-modal": LocalJSX.RdsModal & JSXBase.HTMLAttributes<HTMLRdsModalElement>;
            "rds-nav": LocalJSX.RdsNav & JSXBase.HTMLAttributes<HTMLRdsNavElement>;
            "rds-nav-item": LocalJSX.RdsNavItem & JSXBase.HTMLAttributes<HTMLRdsNavItemElement>;
            "rds-page-heading": LocalJSX.RdsPageHeading & JSXBase.HTMLAttributes<HTMLRdsPageHeadingElement>;
            "rds-pagination": LocalJSX.RdsPagination & JSXBase.HTMLAttributes<HTMLRdsPaginationElement>;
            "rds-panel": LocalJSX.RdsPanel & JSXBase.HTMLAttributes<HTMLRdsPanelElement>;
            "rds-panel-toggle": LocalJSX.RdsPanelToggle & JSXBase.HTMLAttributes<HTMLRdsPanelToggleElement>;
            "rds-pill": LocalJSX.RdsPill & JSXBase.HTMLAttributes<HTMLRdsPillElement>;
            "rds-profile": LocalJSX.RdsProfile & JSXBase.HTMLAttributes<HTMLRdsProfileElement>;
            "rds-progress-bar": LocalJSX.RdsProgressBar & JSXBase.HTMLAttributes<HTMLRdsProgressBarElement>;
            "rds-progress-circle": LocalJSX.RdsProgressCircle & JSXBase.HTMLAttributes<HTMLRdsProgressCircleElement>;
            "rds-radio-button": LocalJSX.RdsRadioButton & JSXBase.HTMLAttributes<HTMLRdsRadioButtonElement>;
            "rds-radio-button-group": LocalJSX.RdsRadioButtonGroup & JSXBase.HTMLAttributes<HTMLRdsRadioButtonGroupElement>;
            "rds-search": LocalJSX.RdsSearch & JSXBase.HTMLAttributes<HTMLRdsSearchElement>;
            "rds-section-heading": LocalJSX.RdsSectionHeading & JSXBase.HTMLAttributes<HTMLRdsSectionHeadingElement>;
            "rds-select": LocalJSX.RdsSelect & JSXBase.HTMLAttributes<HTMLRdsSelectElement>;
            "rds-skeleton": LocalJSX.RdsSkeleton & JSXBase.HTMLAttributes<HTMLRdsSkeletonElement>;
            "rds-snackbar": LocalJSX.RdsSnackbar & JSXBase.HTMLAttributes<HTMLRdsSnackbarElement>;
            "rds-spinner": LocalJSX.RdsSpinner & JSXBase.HTMLAttributes<HTMLRdsSpinnerElement>;
            "rds-stepper": LocalJSX.RdsStepper & JSXBase.HTMLAttributes<HTMLRdsStepperElement>;
            "rds-stepper-item": LocalJSX.RdsStepperItem & JSXBase.HTMLAttributes<HTMLRdsStepperItemElement>;
            "rds-sub-label": LocalJSX.RdsSubLabel & JSXBase.HTMLAttributes<HTMLRdsSubLabelElement>;
            "rds-tab": LocalJSX.RdsTab & JSXBase.HTMLAttributes<HTMLRdsTabElement>;
            "rds-table": LocalJSX.RdsTable & JSXBase.HTMLAttributes<HTMLRdsTableElement>;
            "rds-table-cell": LocalJSX.RdsTableCell & JSXBase.HTMLAttributes<HTMLRdsTableCellElement>;
            "rds-table-row": LocalJSX.RdsTableRow & JSXBase.HTMLAttributes<HTMLRdsTableRowElement>;
            "rds-tabs": LocalJSX.RdsTabs & JSXBase.HTMLAttributes<HTMLRdsTabsElement>;
            "rds-text": LocalJSX.RdsText & JSXBase.HTMLAttributes<HTMLRdsTextElement>;
            "rds-textarea": LocalJSX.RdsTextarea & JSXBase.HTMLAttributes<HTMLRdsTextareaElement>;
            "rds-toggle": LocalJSX.RdsToggle & JSXBase.HTMLAttributes<HTMLRdsToggleElement>;
            "rds-tooltip": LocalJSX.RdsTooltip & JSXBase.HTMLAttributes<HTMLRdsTooltipElement>;
            "rds-tooltip-manager": LocalJSX.RdsTooltipManager & JSXBase.HTMLAttributes<HTMLRdsTooltipManagerElement>;
            "rds-workflow-footer": LocalJSX.RdsWorkflowFooter & JSXBase.HTMLAttributes<HTMLRdsWorkflowFooterElement>;
            "rds-workflow-header": LocalJSX.RdsWorkflowHeader & JSXBase.HTMLAttributes<HTMLRdsWorkflowHeaderElement>;
        }
    }
}
